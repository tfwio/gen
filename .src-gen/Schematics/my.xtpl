<?xml version="1.0"?>
<TemplateCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <UsingNamespace />
  <ReferenceAssembly />
  <Templates>
    <TableTemplate Name="Parameterization Functions" Alias="prams" Group="(System.Data) Fun" SyntaxLanguage="cs,snip">
      <ItemsTemplate>
			cmd.Parameters.AddWithValue("@$(CleanName)",row["$(DataName)"]); // $(DataType);</ItemsTemplate>
      <ElementTemplate>
		#region “$(TableName)” — $(CommandNs) Params

		// Parameterization Test
		void Delete$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{
			cmd.Parameters.AddWithValue("@$(PrimaryKey)",row["$(PrimaryKey)"]);
		}

		void Insert$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{$(FieldValuesNK)
		}

		void Update$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{
			Delete$(TableNameCClean)Params(row,cmd);
			Insert$(TableNameCClean)Params(row,cmd);
		}

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Row Values" Alias="newValues" Group="(System.Data) Fun" SyntaxLanguage="cs">
      <ItemsTemplate>
			row["$(DataName)"] = DBNull.Value; // $(ValueDefault)</ItemsTemplate>
      <ElementTemplate>
		#region “New Row Values” for “$(TableName)”

		// all values are set to DBNull.Value so that you can fix them.
		// actually we do have initial values in the DataConfig, but
		// haven't gotten to checking for proper assertion here.
		public void New$(TableNameCClean)Row(DataRowView row)
		{$(FieldValuesNK)
		}

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Forms: DataBinding — Set" Alias="bindS" Group="(System.Windows.Forms)" SyntaxLanguage="cs">
      <ItemsTemplate>
			this.SetB(this.$(FriendlyName),row,"$(Description)","$(FormatString)");</ItemsTemplate>
      <ElementTemplate>
		// Set DataBinding to Controls
		void Set$(TableNameCClean)Bindings(DataRowView row)
		{
			Clear$(TableNameCClean)Bindings();
			if (row==null) return;$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="const insert-values" Alias="constInsValues" Group="sql" SyntaxLanguage="sql">
      <ItemsTemplate>
	@$(CleanName)</ItemsTemplate>
      <ElementTemplate>) VALUES ($(FieldValuesNK,Cdf))</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query Select (Old)" Alias="qSelect" Group="(System.Data) Fun" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		// we are only lacking a query.
		// this is used in an Access10 class where abstraction provides a Connection
		public void get_dataset_$(TableName)(DataSet ds, string tblName, ref int recordsEffected)
		{
			string query = "select * from [$(TableName)]\n" +
				"	ORDER by [order];";
			using (OleDbConnection connection = OleDbAbstraction.Connection)
			{
				using (OleDbCommand selector = new OleDbCommand(query,connection))
				{
					using (OleDbDataAdapter adaptor = new OleDbDataAdapter(selector))
					{
						adaptor.SelectCommand = selector;
						connection.Open();
						recordsEffected = selector.ExecuteNonQuery();/* = lastRecordsEffected*/
						adaptor.Fill(ds,tblName);
						connection.Close();
					}
				}
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="p2" Group="!Notes" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>//			string query =string.Format(
//				"select TOP 50 * from [$(TableName)];",
//				new DateTime(2010,1,1)
//			);

...
...
	// For temporary reference
		/*
			we also have:
				$(IsPrimary)
				$(PrimaryKey)
				$(FieldValues)
				$(FieldValuesNK)
		*/
		fparams.Add("CleanName",DataName.Replace("-","_"));
		fparams.Add("DataType",DataType);
		fparams.Add("DataName", DataName);
		fparams.Add("FormatString", FormatString);
		fparams.Add("MaxLength", MaxLength);
		fparams.Add("UseFormat", UseFormat);
		fparams.Add("IsNullable", IsNullable);
		fparams.Add("Description", Description);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query Select" Alias="qlSelect" Group="(System.Data)" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		// this call uses the query_select_$(TableName) constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		public void Select$(TableNameCClean)(ref int recordsEffected)
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		public void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query Insert" Alias="qInsert" Group="(System.Data) Fun" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		public void Insert$(TableNameCClean)(DataRowView row, string tableName, string fReport) {
			using ($(ConnectionT) connection = Connection)
			{
				using ($(CommandT) command = new $(CommandT)(query_insert_$(TableNameClean),connection))
				{
					Insert$(TableNameCClean)Params(row,command);
					connection.Open();
					LastRecordsAffected = command.ExecuteNonQuery();
					connection.Close();
				}
			}
			GetLastEntry(row,tableName,fReport);
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Class" Alias="constUpDel" Group="sql" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>SELECT Last([$(TableName)].[$(PrimaryKey)]) AS $(PrimaryKey) FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="const Queries" Alias="classTest" Group="sql" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>SELECT Last([$(TableName)].[$(PrimaryKey)]) AS $(PrimaryKey) FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="const queryLastADB" Alias="queryLastADB" Group="sql" SyntaxLanguage="sql">
      <ItemsTemplate />
      <ElementTemplate>SELECT Last([$(TableName)].[$(PrimaryKey)]) AS $(PrimaryKey) FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query Update" Alias="qUpDel" Group="(System.Data) Fun" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		public void Update$(TableNameCClean)(DataRowView row)
		{
			string query = query_update_$(TableName).
				Replace("$(IdValue)",row["$(PrimaryKey)"].ToString());
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query,connection)) {
						connection.Open();
						adapter.UpdateCommand = command;
						Update$(TableNameCClean)Params(row,command);
						bool pass = false;
						try {
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						pass=true;
						} catch (Exception x) {
							pass = false; Global.statB(":: {0}",x);
						}
						if (pass) row.Row.AcceptChanges();
						connection.Close();
					}
				}
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Forms: DataBinding — Clear" Alias="bindC" Group="(System.Windows.Forms)" SyntaxLanguage="cs">
      <ItemsTemplate>
			this.$(DataName).DataBindings.Clear(); this.$(DataName).Text = string.Empty;</ItemsTemplate>
      <ElementTemplate>
		// Set DataBinding to Controls
		void Clear$(TableNameCClean)Bindings()
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="DataSet, TableView" Alias="dsTableNameConsts" Group="(System.Data) Const" SyntaxLanguage="cs,snip">
      <ItemsTemplate />
      <ElementTemplate>
		#region “$(TableName)” — const DataSet/Table (Names)
		
		const string default_dataset_name = "data";
		const string tbl_$(TableNameClean) = "$(TableName)";

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="DataSet &amp; Table Const" Alias="DsTableView" Group="(System.Data) Props" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>
		#region “$(TableName)” — DataSet, Table &amp; View

		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } }
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Class: Innards" Alias="InnerClass" Group="(System.Data.Access) Class" SyntaxLanguage="cs">
      <ItemsTemplate>
		[$(DataName)] = @$(CleanName),</ItemsTemplate>
      <ElementTemplate>
	/**
	 * The only thing I can think of that's not functioning properly in this
	 * class seems to be the commas in some of the Constants defined for the
	 * query statements.
	 * $(DateTime)
	**/
	public class Data$(Table) : System.Cor3.Data.Access10.Access10
	{
$(TableTemplate:dsTableNameConsts)
$(TableTemplate:DsTableView)
$(TableTemplate:classTest)
$(TableTemplate:newValues)

$(TableTemplate:queryAccess)

		const string path_to_database = @"c:\dev\x";
		public Data$(TableNameC)() : base(path_to_database)
		{
			KeyParams.Add(tbl_$(TableNameClean),"$(PrimaryKey)");
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query Delete" Alias="qDelete" Group="(System.Data) Fun" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		public void Delete$(TableNameCClean)(DataRowView row)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query_delete_$(TableNameClean),connection))
					{
						connection.Open();
						adapter.UpdateCommand = command;
						Delete$(TableNameCClean)Params(row,command);
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						row.Row.Delete();
						connection.Close();
					}
				}
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Forms: DataBinding — Both Clear &amp; Set" Alias="binding" Group="(System.Windows.Forms)" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>
		#region Binding for “$(TableName)”
$(TableTemplate:bindC)
$(TableTemplate:bindS)

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Forms: CreateEntry" Alias="newEntry" Group="(System.Windows.Forms)" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>
		/**
		 * here, our Class is defined as ACCESS10_CLASS_CONTAINER for “$(TableName)”
		 * • we only mention this becase the Create statement might lean on a static call.
		**/
		#region ‘$(TableNameCClean)’ — Events

		DataRowView selected$(TableNameCClean)Row;

		public DataRowView Selected$(TableNameCClean)Row {
			get { return selected$(TableNameCClean)Row; }
			set { Set$(TableNameCClean)Bindings(selected$(TableNameCClean)Row = value); }
		}

		void Create$(TableNameCClean)Entry(object sender, EventArgs args) {
			Selected$(TableNameCClean)Row = ACCESS10_CLASS_CONTAINER.View$(TableNameCClean).AddNew();
			ACCESS10_CLASS_CONTAINER.New$(TableNameCClean)Row(Selected$(TableNameCClean)Row);
		}

		// requires a listBox
		// once again we need the name of our ACCESS10_CLASS_CONTAINER class
		void UpdateInsert$(TableNameCClean)(object sender, EventArgs args)
		{
			DataRowView rx = listBox2.SelectedItem as DataRowView;
			if (rx == null) return;
			if (rx.IsNew) ACCESS10_CLASS_CONTAINER.Insert$(TableNameCClean)(rx);
			else ACCESS10_CLASS_CONTAINER.Update$(TableNameCClean)(rx);
		}

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="SqlServer: LastEntry" Alias="qSqlLast" Group="(System.Data.SqlServer)" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>		
		// Generated $(DateTime)
		
		#region SqlServer Select Query GetLastRecord (for getting PK on INSERT) for “$(TableName)”
		//#define VERIFY
		
		// if there isn't a primary key, then what do we do?
		const string query_last_sqlRecord = @"
SELECT * FROM [$(TheTable)]
WHERE [$(TheKey)] = IDENT_CURRENT('$(TheTable)');
";
		
		#if VERIFY
		//string query = @"SELECT * FROM [$(table-name)] WHERE  [$(primary-key)] = IDENT_CURRENT('$(TableName)');";
		void GetLastRecord(DataRowView row,string tableName, string primaryKey, string verifyCol, string query)
		{
			string queryString = query
				.Replace("$(TheTable)",tableName)
				.Replace("$(TheKey)", primaryKey);
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) ma = new SqlDataAdapter()) {
					using ($(CommandT) cmd = new $(CommandT)(queryString, connection)) {
						connection.Open();
						ma.SelectCommand=cmd;
						LastRecordsAffected = ma.SelectCommand.ExecuteNonQuery();
						ma.Fill(GlobalData,tableName);
						connection.Close();
					}
				}
			}
			if (GlobalData.Tables[tableName].Rows==null || GlobalData.Tables[tableName].Rows.Count==0) { Global.statR("No ROWS!"); }
			else {
				row[primaryKey] = GlobalData.Tables[tableName].Rows[0][primaryKey];
				GlobalData.Tables[tableName].Rows.Add(row.Row);
				row.Row.AcceptChanges();
				Global.statM("Got new Row: {1} — {0}",dt.Rows[0][verifyCol],dt.Rows[0]["id"]);
			}
		}
		#endif

		void GetLastRecord(DataRowView row, string tableName, string primaryKey, string query)
		{
			GetLastRecord(row,tableName,primaryKey,query,true);
		}
		void GetLastRecord(DataRowView row, string tableName, string primaryKey, string query, bool useGlobalTable)
		{
			string queryString = query
				.Replace("$(TheTable)",tableName)
				.Replace("$(TheKey)", primaryKey);
			//DataTable dt = new DataTable("last matter record");//we're using a DataSet here
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) ma = new SqlDataAdapter()) {
					using ($(CommandT) cmd = new $(CommandT)(queryString, connection)) {
						connection.Open();
						ma.SelectCommand=cmd;
						LastRecordsAffected = ma.SelectCommand.ExecuteNonQuery();
						ma.Fill(GlobalData,tableName);
						connection.Close();
					}
				}
			}
			if (GlobalData.Tables[tableName].Rows==null || GlobalData.Tables[tableName].Rows.Count==0) { Global.statR("No ROWS!"); }
			else {
				row[primaryKey] = GlobalData.Tables[tableName].Rows[0][primaryKey];
				GlobalData.Tables[tableName].Rows.Add(row.Row);
				row.Row.AcceptChanges();
			}
		}
		#endregion
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Class: Innards (SqlServer)" Alias="InnerClassSql" Group="(System.Data) Const" SyntaxLanguage="cs,snip">
      <ItemsTemplate />
      <ElementTemplate>		internal const string tbl_$(TableNameClean) = "$(TableName)";
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="query: Last Entry (OleDb Specific, Though Generates for AnyT)" Alias="qLastEntry" Group="(System.Data.OleDb) Fun" SyntaxLanguage="cs, query">
      <ItemsTemplate />
      <ElementTemplate>
		#region GetLastEntry for “$(TableName)”

		// I do believe that this pertains to an access Database.
		// here it doesn't matter what table we're using
		void GetLastEntry(
			DataRowView dataRow,
			string tName,
			string tFieldReport)
		{
			//	Global.statM("{0}",tName);
			//	foreach (string va in KeyParams.KeyArray) { Global.statM("{0}",va); }
			string query = query_last_$(TableNameClean);
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) ma = Adapter) {
					using ($(CommandT) cmd = new $(CommandT)(query, connection)) {
						connection.Open();
						ma.SelectCommand=cmd;
						ma.SelectCommand.ExecuteNonQuery();
						ma.Fill(GlobalData,tbl_$(TableNameClean));
						connection.Close();
					} } }
			if (dt.Rows==null || dt.Rows.Count==0) Global.statR("No ROWS!");
			else
			{
				// todo: we (probably) have a key defined in a dictionary
				//		 if this is the Access10 Class.
				dataRow[KeyParams[tName]] = ((int)dt.Rows[0][KeyParams[tName]]);
				GlobalData.Tables[tName].Rows.Add(dataRow.Row);
				dataRow.Row.AcceptChanges();
				Global.statM("Got new Row: {1} — {0}",dataRow[tFieldReport],dt.Rows[0][KeyParams[tName]]);
			}
		}

		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="queries: Access" Alias="queryAccess" Group="(System.Data.Access)" SyntaxLanguage="query, cs">
      <ItemsTemplate>
			cmd.Parameters.AddWithValue("@$(CleanName)",row["$(DataName)"]); // $(DataType);</ItemsTemplate>
      <ElementTemplate>
		#region “$(TableName)” — $(CommandNs) Params

		// Parameterization Test (note that the template fields support this)
		void Delete$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{
			cmd.Parameters.AddWithValue("@$(PrimaryKey)",row["$(PrimaryKey)"]);
		}

		void Insert$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{$(FieldValuesNK)
		}

		void Update$(TableNameCClean)Params(DataRowView row, $(CommandT) cmd)
		{
			Insert$(TableNameCClean)Params(row,cmd);
		}

		#endregion

		#region Queries for “$(TableName)”

		void Delete$(TableNameCClean)(DataRowView row)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query_delete_$(TableNameClean),connection))
					{
						connection.Open();
						adapter.UpdateCommand = command;
						Delete$(TableNameCClean)Params(row,command);
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						row.Row.Delete();
						connection.Close();
					}
				}
			}
		}

		void Insert$(TableNameCClean)(DataRowView row, string tableName, string fReport) {
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) command = new $(CommandT)(query_insert_$(TableNameClean),connection))
				{
					Insert$(TableNameCClean)Params(row,command);
					connection.Open();
					LastRecordsAffected = command.ExecuteNonQuery();
					connection.Close();
				}
			}
			GetLastEntry(row,tableName,fReport);
		}

		//	This is a query specifically for Microsoft Access and not SqlServer.
		void GetLastEntry(DataRowView dataRow, string tName, string tFieldReport)
		{
			string query = query_last_$(TableNameClean);
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) ma = Adapter) {
					using ($(CommandT) cmd = new $(CommandT)(query, connection)) {
						connection.Open();
						ma.SelectCommand=cmd;
						ma.SelectCommand.ExecuteNonQuery();
						ma.Fill(GlobalData,"$(TableName)");
						connection.Close();
					} } }
			if (dt.Rows==null || dt.Rows.Count==0) Global.statR("No ROWS!");
			else
			{
				// todo: we (probably) have a key defined in a dictionary
				// if this is the Access10 Class.
				dataRow[KeyParams[tName]] = ((int)dt.Rows[0][KeyParams[tName]]);
				GlobalData.Tables[tName].Rows.Add(dataRow.Row);
				dataRow.Row.AcceptChanges();
				Global.statM("Got new Row: {1} — {0}",dataRow[tFieldReport],dt.Rows[0][KeyParams[tName]]);
			}
		}

		// this call uses the ‘query_select_$(TableNameClean)’ constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)(ref int recordsEffected)
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}

		void Update$(TableNameCClean)(DataRowView row)
		{
			string query = query_update_$(TableNameClean).
				Replace("$(IdValue)",row["$(PrimaryKey)"].ToString());
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query,connection)) {
						connection.Open();
						adapter.UpdateCommand = command;
						Update$(TableNameCClean)Params(row,command);
						bool pass = false;
						try {
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						pass=true;
						} catch (Exception x) {
							pass = false; Global.statB(":: {0}",x);
						}
						if (pass) row.Row.AcceptChanges();
						connection.Close();
					}
				}
			}
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Class: Access" Alias="0123" Group="(System.Data.Access) Class">
      <ItemsTemplate />
      <ElementTemplate>
	public class AccessConnector
	{
$(TableTemplate:queryAccess)
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="TableTree" Alias="classTableNameTree" Group="(System.Data) Props">
      <ItemsTemplate />
      <ElementTemplate>		// “$(TableName)”
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="multi-consts" Alias="Select Statement" Group="sql" SyntaxLanguage="access">
      <ItemsTemplate />
      <ElementTemplate>SELECT Last([$(TableName)].[$(PrimaryKey)]) AS $(PrimaryKey) FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="const updatevalues" Alias="cUpdate" Group="(System.Data) Const" SyntaxLanguage="cs,snip">
      <ItemsTemplate>
	[$(DataName)] = @$(FriendlyName)</ItemsTemplate>
      <ElementTemplate>		const string query_update_$(TableNameClean) = @"UPDATE [$(TableName)] SET $(FieldValuesNK,Cdf) WHERE [$(PrimaryKey)] = $(IdValue);";</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="entryClass" Alias="cEntry" Group="(System.Data) Multi">
      <ItemsTemplate />
      <ElementTemplate>
			KeyParams[tbl_$(TableNameClean)] = "$(PrimaryKey)";</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="classQueries" Alias="cQueries" Group="(System.Data) Multi">
      <ItemsTemplate />
      <ElementTemplate>
		#region Queries for “$(TableName)”

		void Delete$(TableNameCClean)(DataRowView row)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query_delete_$(TableNameClean),connection))
					{
						connection.Open();
						adapter.UpdateCommand = command;
						Delete$(TableNameCClean)Params(row,command);
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						row.Row.Delete();
						connection.Close();
					}
				}
			}
		}

		void Insert$(TableNameCClean)(DataRowView row, string tableName, string fReport) {
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) command = new $(CommandT)(query_insert_$(TableNameClean),connection))
				{
					Insert$(TableNameCClean)Params(row,command);
					connection.Open();
					LastRecordsAffected = command.ExecuteNonQuery();
					connection.Close();
				}
			}
			GetLastEntry(row,tableName,fReport);
		}

		//	This is a query specifically for Microsoft Access and not SqlServer.
		void GetLastEntry(DataRowView dataRow, string tName, string tFieldReport)
		{
			string query = query_last_$(TableNameClean);
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) ma = Adapter) {
					using ($(CommandT) cmd = new $(CommandT)(query, connection)) {
						connection.Open();
						ma.SelectCommand=cmd;
						ma.SelectCommand.ExecuteNonQuery();
						ma.Fill(GlobalData,"$(TableName)");
						connection.Close();
					} } }
			if (dt.Rows==null || dt.Rows.Count==0) Global.statR("No ROWS!");
			else
			{
				// todo: we (probably) have a key defined in a dictionary
				// if this is the Access10 Class.
				dataRow[KeyParams[tName]] = ((int)dt.Rows[0][KeyParams[tName]]);
				GlobalData.Tables[tName].Rows.Add(dataRow.Row);
				dataRow.Row.AcceptChanges();
				Global.statM("Got new Row: {1} — {0}",dataRow[tFieldReport],dt.Rows[0][KeyParams[tName]]);
			}
		}

		// this call uses the ‘query_select_$(TableNameClean)’ constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)(ref int recordsEffected)
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}

		void Update$(TableNameCClean)(DataRowView row)
		{
			string query = query_update_$(TableNameClean).
				Replace("$(IdValue)",row["$(PrimaryKey)"].ToString());
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query,connection)) {
						connection.Open();
						adapter.UpdateCommand = command;
						Update$(TableNameCClean)Params(row,command);
						bool pass = false;
						try {
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						pass=true;
						} catch (Exception x) {
							pass = false; Global.statB(":: {0}",x);
						}
						if (pass) row.Row.AcceptChanges();
						connection.Close();
					}
				}
			}
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Native Class" Alias="native" Group="(System.Data) DataTable" SyntaxLanguage="cs,snip">
      <ItemsTemplate>
				table.Columns.Add("$(DataName)",typeof($(Native))); /* $(Description) */</ItemsTemplate>
      <ElementTemplate>			/// &lt;summary&gt;
			/// Creates a new DataTable and adds the respective columns to it…
			/// &lt;/summary&gt;
			static public $(TableNameCClean)Columns(DataTable table, string tableName)
			{
				DataTable table = new DataTable(tableName);
$(FieldValues)
				// Primary Key Support
				// • Adding the PrimaryKey to the “Runtime DataSchema” will effect
				//   Connection.Execution so any time so use caution when working
				//	 with the PrimaryKey.
				table.PrimaryKey = new DataColumn[]{ table.Columns["$(PrimaryKey)"] };
				return table;
			}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Native:Var" Alias="nativeVar" Group="(System.Data) DataTable.Class" SyntaxLanguage="cs,snip">
      <ItemsTemplate>
			public $(Native) $(CleanName) { get { return ($(Native)) row["$(DataName)"]; } set { SetRowValue("$(DataName)",value); } }</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="Cols" Alias="nativeCols" Group="(System.Data) DataTable" SyntaxLanguage="cs,snip">
      <ItemsTemplate>
			table.Columns.Add("$(DataName)",typeof($(Native))); /* $(Description) */</ItemsTemplate>
      <ElementTemplate>		/// &lt;summary&gt;
		/// Creates a new DataTable and adds the respective columns to it…
		/// &lt;/summary&gt;
		static public void $(TableNameCClean)Columns(DataTable table, string tableName)
		{
			DataTable table = new DataTable(tableName);$(FieldValues)
			return table;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="generalInsert" Alias="query:dbo.identity" Group="sql.data.dbo">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [DATABASENAME].[dbo].[$(TableName)]($(FieldValues,Cdf))
VALUES ($(TableTemplate:identityValues,$(TableName)));
Go</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="tInsertValues" Group="tsql">
      <ItemsTemplate>&lt;$(DataName), $(datatype)$(nmax),&gt;
		</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="qG" Group="tsql">
      <ItemsTemplate>
	reader["$(DataName)"]</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="string.Format (for reader)" Alias="csQuery" Group="(System.Data)" SyntaxLanguage="cs">
      <ItemsTemplate>
					Reformat(reader,"$(DataName)")</ItemsTemplate>
      <ElementTemplate>			return string.Format(formatString,$(FieldValues,Cdf));</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="const updateValues" Alias="updateValues" Group="sql">
      <ItemsTemplate>
		[$(DataName)] = @$(CleanName)</ItemsTemplate>
      <ElementTemplate>UPDATE [$(TableName)] SET $(FieldValuesNK,Cdf)
WHERE [$(PrimaryKey)] = @$(PrimaryKey);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="sqlLite3Test" Alias="newSqlLiteDb" Group="(System.Data.SqlLite)">
      <ItemsTemplate />
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="prime.web.link" Group="prime.web">
      <ItemsTemplate>&lt;a href="$(DefaultValue)"&gt;$(DataName)&lt;/a&gt;</ItemsTemplate>
      <ElementTemplate>	&lt;div class="menu m_item"&gt;
&lt;asp:Content ID="MainLinks" runat="server" ContentPlaceHolderID="MainLinks"&gt;$(FieldValues)&lt;/asp:Content&gt;
	&lt;/div&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="dataClass" Group="(System.Data.Access)">
      <ItemsTemplate />
      <ElementTemplate>	// TableTemplate: (System.Data.Access) — dataClass
	// $(DateTime)
	public class Sample_$(TableNameCClean) : Access10
	{
		
		public class DataState
		{
			public $(ConnectionT) Connection;
			public $(CommandT) Command;
			public $(AdapterT) Adaptor;
			
			public DataState(string query, $(ConnectionT) connection)
			{
				Connection = connection;
				Command = new $(CommandT)(query,Connection);
				$(AdapterT) adaptor = new $(AdapterT)(Command);
			}
		}
		public DataState GetState(string query)
		{
			return new DataState(query,Connection);
		}
		#region const
		
		DataSet GlobalData = new DataSet("nameme");

		const string tbl_$(TableNameClean) = "$(TableName)";
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#region Query Const for “drivers”
		// note that you should re-name any parameter named “@xid” to
		const string query_delete_$(TableNameClean) = @"$(TableTemplate:query:Delete)";
		const string query_insert_$(TableNameClean) = @"$(TableTemplate:query:Insert)";
		//const string query_last_drivers = @"$(TableTemplate:query:SelectLast)";
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		const string query_update_$(TableNameClean) = @"$(TableTemplate:query:Update)";
		const string query_insert_identity_$(TableNameClean) = @"$(TableTemplate:query:ident)";
		#endregion

		#endregion
		
		// this call uses the ‘query_select_drivers’ constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}
		#region $(TableName) InitialColumnValues
		// this function should be applied once the Initial data is loaded
		// from $(TableNameCClean)
$(TableTemplate:nativeCols)
		#endregion

		public Sample_$(TableNameCClean)() : base(@"[PATH_TO_ACCESS.DB]") // d:\dev\memos.mdb?
		//public Sample_$(TableNameCClean)()
		{
		//	dsource = @"YOUR_DATABASE"; // @"OOO\SQL2005EXPRESS";
		//	dcatalog = "YOUR_TABLE_NAME"; // "memos"
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="query:Insert" Group="sql.data">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>INSERT INTO [$(TableName)] ($(FieldValuesNK,Cdf))
VALUES($(TableTemplate:identityValuesNK,$(TableName)));</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl5" Alias="query:Update" Group="sql.data">
      <ItemsTemplate>
			cmd.Parameters.AddWithValue("@$(CleanName)", this.$(FriendlyName));</ItemsTemplate>
      <ElementTemplate>UPDATE [$(TableName)] SET $(FieldValuesNK,Cdf)
WHERE [$(PrimaryKey)] = @$(PrimaryKey);
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl6" Alias="query:Delete" Group="sql.data">
      <ItemsTemplate />
      <ElementTemplate>DELETE FROM [$(TableName)] where [$(PrimaryKey)] = @id;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl7" Alias="query:SelectLast" Group="sql.data" SyntaxLanguage="access">
      <ItemsTemplate />
      <ElementTemplate>SELECT Last([$(TableName)].[$(PrimaryKey)]) AS id FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl8" Alias="query:Select" Group="sql.data">
      <ItemsTemplate />
      <ElementTemplate>SELECT * FROM [$(TableName)];</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl9" Alias="InsertIdentity" Group="tsql">
      <ItemsTemplate>[$(DataName)]
		</ItemsTemplate>
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [DABABASE_NAME].[dbo].[$(TableName)]
	($(FieldValues,Cdf))
VALUES
	($(TableTemplate:tInsertValues,$(TableName)))
Go</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl10" Alias="identityValues" Group="tsql">
      <ItemsTemplate>
	@$(CleanName)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl11" Alias="query:ident" Group="sql.data">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [$(TableName)]($(FieldValues,Cdf))
VALUES ($(TableTemplate:identityValues,$(TableName)));</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="webTable" Group="prime.web.html">
      <ItemsTemplate>&lt;td&gt;{$(FieldIndex)}&lt;/td&gt;</ItemsTemplate>
      <ElementTemplate>
//		Response.Write(
			string.Format(
				@"
				&lt;tr&gt;$(FieldValues)&lt;/tr&gt;",$(TableTemplate:row.value,$(TableName)));
//);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="row.value" Group="prime.web">
      <ItemsTemplate>
				row["$(DataName)"]</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="xstate" Group="prime.web.db.mdb">
      <ItemsTemplate />
      <ElementTemplate>/*
 * oIo — $(Date) — $(Time)
 */
using System;
using System.Collections.Generic;
using $(CommandNs);
using System.Drawing;
using System.Windows.Forms;

using Todo.Data;

namespace Todo
{
	/**
	 * The idea here entails the usage of a special TableElement
	 * which contains a Description element specifying the Fields
	 * that are being converted to another table with different field
	 * names.
	 * ----
	 * Also probably worth noting --- I spent a while looking for things
	 * to replace in this template, but there werent any.
	 * Look to the Main Data Class to switch the DataName with the Description.
	**/
	/// &lt;summary&gt;Description of MainForm.&lt;/summary&gt;
	public partial class MainForm : Form
	{
		const string converter = @"$(TableTemplate:query:ident3)";
		Sample_$(TableNameCClean) pt;
		public MainForm()
		{
			InitializeComponent();
			pt = new Sample_$(TableNameCClean)();
			tQuery.Text = "SELECT * from [$(TableName)]";
		}

		string GetBool($(ReaderT) row, string field)
		{
			bool? data = row[field] as bool?;
			if (data.HasValue &amp;&amp; data.Value) return "1";
			return "0";
		}
		object Reformat($(ReaderT) reader, string fieldName)
		{
			if (reader[fieldName]==DBNull.Value) return @"NULL";
			else if (reader[fieldName]==null) return @"NULL";
			if (reader[fieldName].GetType()==typeof(string))
			{
				string str = reader[fieldName].ToString()
				//	.Replace(@"""",@"""""")
				//	.Replace("\r","")
					.Replace(@"'","''")
					.Replace("\r","'+char(10)+'")
					.Replace("\n","'+char(13)+'");
				return string.Format(@"'{0}'",str);
			}
			else if (reader[fieldName].GetType()==typeof(bool))
				return GetBool(reader,fieldName);
			else if (reader[fieldName].GetType()==typeof(DateTime))
				return string.Format("'{0:MM/dd/yy hh:mm.ss tt}'",reader[fieldName]);
			else return reader[fieldName];
		}

		object ReformatStrToInt(OleDbDataReader reader, string fieldName)
		{
			if (reader[fieldName]==DBNull.Value) return @"NULL";
			else if (reader[fieldName]==null) return @"NULL";
			if (reader[fieldName].GetType()==typeof(string))
			{
				long str = long.Parse(reader[fieldName] as string);
				//	.Replace(@"""",@"""""")
				//	.Replace("\r","")
//					.Replace(@"'","''")
//					.Replace("\r","'+char(10)+'")
//					.Replace("\n","'+char(13)+'");
				return string.Format(@"{0}",str);
			}
			else if (reader[fieldName].GetType()==typeof(bool))
				return GetBool(reader,fieldName);
			else if (reader[fieldName].GetType()==typeof(DateTime))
				return string.Format("'{0:MM/dd/yy hh:mm.ss tt}'",reader[fieldName]);
			else return reader[fieldName];
		}
		void ToolStripButton1Click(object sender, EventArgs e)
		{
			string tstring = string.Empty;
			Sample_$(TableNameCClean).DataState ds = pt.GetState(tQuery.Text);
			ds.Connection.Open();
			$(ReaderT) reader = null;
			try {
				reader = ds.Command.ExecuteReader();
			} catch (Exception) {
				ds.Connection.Close();
				return;
			}
			while (reader.Read())
			{
				tstring += string.Format(
					converter,$(TableTemplate:row.value.rep3,$(TableName))
				);
			}
			tResult.Text = tstring;
			ds.Connection.Close();
		}
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="dstate" Group="prime.web.db.sql">
      <ItemsTemplate />
      <ElementTemplate>
	public class Sample_$(TableNameCClean) : SqlDbA
	{
		public class DataState
		{
			public $(ConnectionT) Connection;
			public $(CommandT) Command;
			public $(AdapterT) Adaptor;
			
			public DataState(string query, $(ConnectionT) connection)
			{
				Connection = connection;
				Command = new $(CommandT)(query,Connection);
				$(AdapterT) adaptor = new $(AdapterT)(Command);
			}
		}
		public DataState GetState(string query)
		{
			return new DataState(query,Connection);
		}
		#region const
		
		DataSet GlobalData = new DataSet("memos");

		const string tbl_$(TableNameClean) = "$(TableName)";
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_delete_$(TableNameClean) = @"$(TableTemplate:query:Delete)";
		const string query_insert_$(TableNameClean) = @"$(TableTemplate:query:Insert)";
		//const string query_select_last_SomethingOrOther = @"$(TableTemplate:query:SelectLast)";
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		const string query_update_$(TableNameClean) = @"$(TableTemplate:query:Update)";
		const string query_insert_identity_$(TableNameClean) = @"$(TableTemplate:query:ident)";
		#endregion

		#endregion
		
		// this call uses the query_select_last_SomethingOrOther constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using (SqlConnection connection = Connection) {
				using (SqlCommand selector = new SqlCommand(query,connection)) {
					using (SqlDataAdapter adaptor = new SqlDataAdapter(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}
		public Sample_$(TableNameCClean)()
		{
			dsource = @"OOO\SQL2005EXPRESS";
			dcatalog = "$(TableName)";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="query:ident2" Group="sql.data">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [$(TableName)]($(FieldValues,Cdf))
VALUES ($(TableTemplate:identityIndexes,$(TableName)));
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="number_values" Group="sql.data">
      <ItemsTemplate>{$(FieldIndex)}</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="query:dbo.identity2" Group="sql.data.dbo">
      <ItemsTemplate />
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [DATABASENAME].[dbo].[$(TableName)]($(FieldValues,Cdf))
VALUES ($(TableTemplate:identityValues,$(TableName)));
Go</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl5" Alias="identityIndexes" Group="tsql">
      <ItemsTemplate>
	{$(FieldIndex)}</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl6" Alias="row.value.replace" Group="prime.web">
      <ItemsTemplate>
					Reformat(reader,"$(DataName)")</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl7" Alias="tplClassMemos" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>	// template alias: “tplClass”, template group: (System.Data.SqlServer)
	// Generated: $(DateTime)
	//$(Var:ClassName,Memos)
	public class $(TableNameCClean)DataSource : SqlDbA
	{

		const string default_dataset_name = "data";
$(TableTemplate:InnerClassSql,memos)
		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } }

		#region Table/View
$(TableTemplate:Table/View,memos)
		#endregion

$(TableTemplate:query:tsqlConstants,memos)
$(TableTemplate:prams,memos)

$(TableTemplate:csQueries,memos)

$(TableTemplate:qSqlLastIntro,memos)
$(TableTemplate:qSqlLast,memos)
$(TableTemplate:nativeColumns)

		public $(TableNameCClean)DataSource()
		{
			this.dsource = @"OOO\SQL2005EXPRESS";
			this.dcatalog = @"$(TableName)";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl8" Alias="qSqlLastIntro" Group="(System.Data.SqlServer)">
      <ItemsTemplate />
      <ElementTemplate>		void GetLast$(TableNameCClean)Record(DataRowView row) { GetLastRecord(row, "$(TableName)", "$(PrimaryKey)", query_last_sqlRecord); }
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl9" Alias="query:constants" Group="sql.data">
      <ItemsTemplate />
      <ElementTemplate>		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_delete_$(TableNameClean) = @"$(TableTemplate:query:Delete)";
		const string query_insert_$(TableNameClean) = @"$(TableTemplate:query:Insert)";
		//const string query_select_last_SomethingOrOther = @"$(TableTemplate:query:SelectLast)";
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		const string query_update_$(TableNameClean) = @"$(TableTemplate:query:Update)";
		const string query_insert_identity_$(TableNameClean) = @"$(TableTemplate:query:ident)";
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="csQueries" Alias="csQueries" Group="(System.Data.SqlServer)">
      <ItemsTemplate />
      <ElementTemplate>		#region Queries for “$(TableName)”
		// begin-tpl: csQueries

		internal void Delete$(TableNameCClean)(DataRowView row)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query_delete_$(TableNameClean),connection))
					{
						connection.Open();
						adapter.UpdateCommand = command;
						Delete$(TableNameCClean)Params(row,command);
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["id"]);
						row.Row.Delete();
						connection.Close();
					}
				}
			}
		}

		internal void Insert$(TableNameCClean)(DataRowView row) {
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) command = new $(CommandT)(query_insert_$(TableNameClean),connection))
				{
					Insert$(TableNameCClean)Params(row,command);
					connection.Open();
					LastRecordsAffected = command.ExecuteNonQuery();
					connection.Close();
				}
			}
			GetLast$(TableNameCClean)Record(row);
		}

		// this call uses the ‘query_select_$(TableNameClean)’ constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		internal void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}
		
		// for a custom query.
		internal DataTable SelectTable$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			DataTable table = new DataTable(tblName);
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(table);
						connection.Close();
					}
				}
			}
			return table;
		}
		// this is used in a class where abstraction provides a Connection
		internal void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
			
		}

		internal void Update$(TableNameCClean)(DataRowView row)
		{
			string query = query_update_$(TableNameClean).
				Replace("$(IdValue)",row["$(PrimaryKey)"].ToString());
			using ($(ConnectionT) connection = Connection) {
				using ($(AdapterT) adapter = new $(AdapterT)()) {
					using ($(CommandT) command = new $(CommandT)(query,connection)) {
						connection.Open();
						adapter.UpdateCommand = command;
						Update$(TableNameCClean)Params(row,command);
						bool pass = false;
						try {
						LastRecordsAffected = command.ExecuteNonQuery();
						Global.statB("Rows effected: {0} id = {1}",LastRecordsAffected,row["$(PrimaryKey)"]);
						pass=true;
						} catch (Exception x) {
							pass = false; Global.statB(":: {0}",x);
						}
						if (pass) row.Row.AcceptChanges();
						connection.Close();
					}
				}
			}
		}
		// end-tpl: csQueries
		#endregion
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl11" Alias="DocumentMaster" Group="(Forms.Docking)">
      <ItemsTemplate>		void eToggle$(DataNameCClean)(object sender, EventArgs e) { Toggler($(DataName),typeof($(DataType)),true); }
</ItemsTemplate>
      <ElementTemplate>
	public interface IDockHost
	{
		//void Toggler(HostedDocument doc,Type t, bool close);
		//void Toggler(HostedDocument doc,Type t);
		//void Toggler(HostedDocument doc,string fullTypeName, bool close);
$(TableTemplate:IDoc,Documents)
$(TableTemplate:IDoc,Panels)
	}

	/// &lt;summary&gt;
	/// Description of MainForm.
	/// &lt;/summary&gt;
	public partial class MainForm : Form, IDockHost
	{
		#region Docs/Panes
		// Documents:
$(TableTemplate:docProperty,Documents)
		// Panels:
$(TableTemplate:docProperty,Panels)
		#endregion

		public HostedDocument DocumentFromKey(string Key)
		{
			// Delete the first else!
$(TableTemplate:DocFromKey,Documents)
$(TableTemplate:DocFromKey,Panels)
			return null;
		}
		#region Toggle Documents
		//
		void Toggler(HostedDocument doc,Type t, bool close) { Toggler(doc,t.FullName,close); }
		void Toggler(HostedDocument doc,Type t) { Toggler(doc,t.FullName,false); }
		void Toggler(HostedDocument doc,string fullTypeName, bool close)
		{
			if (doc==null) {
				doc = DocumentFromKey(fullTypeName);
				doc.Show(dockPane);
				return;
			}
			if (doc.IsHidden) doc.Show(this.dockPane);
			else if (doc.IsDisposed) {
				doc = DocumentFromKey(fullTypeName);
				doc.Show(dockPane);
			}
			else if (close) doc.Close();
			else doc.Hide();
		}
		//
$(TableTemplate:eToggle,Documents)
$(TableTemplate:eToggle,Panels)
		#endregion

		public MainForm()
		{
			InitializeComponent();
		}
		
		#region Design
		
		/// &lt;summary&gt;
		/// Designer variable used to keep track of non-visual components.
		/// &lt;/summary&gt;
		private System.ComponentModel.IContainer components = null;
		
		/// &lt;summary&gt;
		/// Disposes resources used by the form.
		/// &lt;/summary&gt;
		/// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
		protected override void Dispose(bool disposing)
		{
			if (disposing) {
				if (components != null) {
					components.Dispose();
				}
			}
			base.Dispose(disposing);
		}
		
		/// &lt;summary&gt;
		/// This method is required for Windows Forms designer support.
		/// Do not change the method contents inside the source code editor. The Forms designer might
		/// not be able to load this method if it was changed manually.
		/// &lt;/summary&gt;
		private void InitializeComponent()
		{
			WeifenLuo.WinFormsUI.Docking.DockPanelSkin dockPanelSkin1 = new WeifenLuo.WinFormsUI.Docking.DockPanelSkin();
			WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin autoHideStripSkin1 = new WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin();
			WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient1 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin dockPaneStripSkin1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin();
			WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient dockPaneStripGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient2 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient2 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient3 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient dockPaneStripToolWindowGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient4 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient5 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient3 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient6 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			WeifenLuo.WinFormsUI.Docking.TabGradient tabGradient7 = new WeifenLuo.WinFormsUI.Docking.TabGradient();
			this.dockPane = new WeifenLuo.WinFormsUI.Docking.DockPanel();
			this.statusStrip1 = new System.Windows.Forms.StatusStrip();
			this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
			this.toolStripStatusLabel2 = new System.Windows.Forms.ToolStripStatusLabel();
			this.menuStrip1 = new System.Windows.Forms.MenuStrip();
			this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
			this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.viewToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.documentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.memoEditorToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.printingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.textEditorToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.panelsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.propertiesPanelToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.memoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripMenuItem7 = new System.Windows.Forms.ToolStripSeparator();
			this.toolStripMenuItem4 = new System.Windows.Forms.ToolStripSeparator();
			this.windowLayoutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.restoreWindowLayoutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.saveWindowLayoutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.statusStrip1.SuspendLayout();
			this.menuStrip1.SuspendLayout();
			this.SuspendLayout();
			// 
			// dockPane
			// 
			this.dockPane.ActiveAutoHideContent = null;
			this.dockPane.Dock = System.Windows.Forms.DockStyle.Fill;
			this.dockPane.DockBackColor = System.Drawing.SystemColors.AppWorkspace;
			this.dockPane.DockLeftPortion = 250;
			this.dockPane.DockRightPortion = 250;
			this.dockPane.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.dockPane.Location = new System.Drawing.Point(0, 24);
			this.dockPane.Name = "dockPane";
			this.dockPane.Size = new System.Drawing.Size(524, 350);
			dockPanelGradient1.EndColor = System.Drawing.SystemColors.ControlLight;
			dockPanelGradient1.StartColor = System.Drawing.SystemColors.ControlLight;
			autoHideStripSkin1.DockStripGradient = dockPanelGradient1;
			tabGradient1.EndColor = System.Drawing.SystemColors.Control;
			tabGradient1.StartColor = System.Drawing.SystemColors.Control;
			tabGradient1.TextColor = System.Drawing.SystemColors.ControlDarkDark;
			autoHideStripSkin1.TabGradient = tabGradient1;
			dockPanelSkin1.AutoHideStripSkin = autoHideStripSkin1;
			tabGradient2.EndColor = System.Drawing.SystemColors.ControlLightLight;
			tabGradient2.StartColor = System.Drawing.SystemColors.ControlLightLight;
			tabGradient2.TextColor = System.Drawing.SystemColors.ControlText;
			dockPaneStripGradient1.ActiveTabGradient = tabGradient2;
			dockPanelGradient2.EndColor = System.Drawing.SystemColors.Control;
			dockPanelGradient2.StartColor = System.Drawing.SystemColors.Control;
			dockPaneStripGradient1.DockStripGradient = dockPanelGradient2;
			tabGradient3.EndColor = System.Drawing.SystemColors.ControlLight;
			tabGradient3.StartColor = System.Drawing.SystemColors.ControlLight;
			tabGradient3.TextColor = System.Drawing.SystemColors.ControlText;
			dockPaneStripGradient1.InactiveTabGradient = tabGradient3;
			dockPaneStripSkin1.DocumentGradient = dockPaneStripGradient1;
			tabGradient4.EndColor = System.Drawing.SystemColors.ActiveCaption;
			tabGradient4.LinearGradientMode = System.Drawing.Drawing2D.LinearGradientMode.Vertical;
			tabGradient4.StartColor = System.Drawing.SystemColors.GradientActiveCaption;
			tabGradient4.TextColor = System.Drawing.SystemColors.ActiveCaptionText;
			dockPaneStripToolWindowGradient1.ActiveCaptionGradient = tabGradient4;
			tabGradient5.EndColor = System.Drawing.SystemColors.Control;
			tabGradient5.StartColor = System.Drawing.SystemColors.Control;
			tabGradient5.TextColor = System.Drawing.SystemColors.ControlText;
			dockPaneStripToolWindowGradient1.ActiveTabGradient = tabGradient5;
			dockPanelGradient3.EndColor = System.Drawing.SystemColors.ControlLight;
			dockPanelGradient3.StartColor = System.Drawing.SystemColors.ControlLight;
			dockPaneStripToolWindowGradient1.DockStripGradient = dockPanelGradient3;
			tabGradient6.EndColor = System.Drawing.SystemColors.GradientInactiveCaption;
			tabGradient6.LinearGradientMode = System.Drawing.Drawing2D.LinearGradientMode.Vertical;
			tabGradient6.StartColor = System.Drawing.SystemColors.GradientInactiveCaption;
			tabGradient6.TextColor = System.Drawing.SystemColors.ControlText;
			dockPaneStripToolWindowGradient1.InactiveCaptionGradient = tabGradient6;
			tabGradient7.EndColor = System.Drawing.Color.Transparent;
			tabGradient7.StartColor = System.Drawing.Color.Transparent;
			tabGradient7.TextColor = System.Drawing.SystemColors.ControlDarkDark;
			dockPaneStripToolWindowGradient1.InactiveTabGradient = tabGradient7;
			dockPaneStripSkin1.ToolWindowGradient = dockPaneStripToolWindowGradient1;
			dockPanelSkin1.DockPaneStripSkin = dockPaneStripSkin1;
			this.dockPane.Skin = dockPanelSkin1;
			this.dockPane.TabIndex = 9;
			// 
			// statusStrip1
			// 
			this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.toolStripStatusLabel1,
									this.toolStripStatusLabel2});
			this.statusStrip1.Location = new System.Drawing.Point(0, 374);
			this.statusStrip1.Name = "statusStrip1";
			this.statusStrip1.Size = new System.Drawing.Size(524, 22);
			this.statusStrip1.TabIndex = 10;
			this.statusStrip1.Text = "statusStrip1";
			// 
			// toolStripStatusLabel1
			// 
			this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
			this.toolStripStatusLabel1.Size = new System.Drawing.Size(10, 17);
			this.toolStripStatusLabel1.Text = " ";
			// 
			// toolStripStatusLabel2
			// 
			this.toolStripStatusLabel2.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
			this.toolStripStatusLabel2.ForeColor = System.Drawing.Color.Red;
			this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
			this.toolStripStatusLabel2.Size = new System.Drawing.Size(10, 17);
			this.toolStripStatusLabel2.Text = " ";
			// 
			// menuStrip1
			// 
			this.menuStrip1.BackColor = System.Drawing.Color.White;
			this.menuStrip1.Font = new System.Drawing.Font("Swis721 BdRnd BT", 7F);
			this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.toolStripMenuItem1,
									this.fileToolStripMenuItem,
									this.viewToolStripMenuItem});
			this.menuStrip1.Location = new System.Drawing.Point(0, 0);
			this.menuStrip1.MdiWindowListItem = this.toolStripMenuItem1;
			this.menuStrip1.Name = "menuStrip1";
			this.menuStrip1.Padding = new System.Windows.Forms.Padding(2);
			this.menuStrip1.Size = new System.Drawing.Size(524, 24);
			this.menuStrip1.TabIndex = 8;
			this.menuStrip1.Text = "menuStrip1";
			// 
			// toolStripMenuItem1
			// 
			this.toolStripMenuItem1.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.toolStripMenuItem1.Name = "toolStripMenuItem1";
			this.toolStripMenuItem1.Size = new System.Drawing.Size(55, 20);
			this.toolStripMenuItem1.Text = "Window";
			// 
			// fileToolStripMenuItem
			// 
			this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.exitToolStripMenuItem});
			this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
			this.fileToolStripMenuItem.Size = new System.Drawing.Size(35, 20);
			this.fileToolStripMenuItem.Text = "&amp;File";
			// 
			// exitToolStripMenuItem
			// 
			this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
			this.exitToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Alt | System.Windows.Forms.Keys.F4)));
			this.exitToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.exitToolStripMenuItem.Text = "Exit";
			// 
			// viewToolStripMenuItem
			// 
			this.viewToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.documentsToolStripMenuItem,
									this.panelsToolStripMenuItem,
									this.toolStripMenuItem4,
									this.windowLayoutToolStripMenuItem});
			this.viewToolStripMenuItem.Name = "viewToolStripMenuItem";
			this.viewToolStripMenuItem.Size = new System.Drawing.Size(40, 20);
			this.viewToolStripMenuItem.Text = "View";
			// 
			// documentsToolStripMenuItem
			// 
			this.documentsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.memoEditorToolStripMenuItem,
									this.printingToolStripMenuItem,
									this.textEditorToolStripMenuItem});
			this.documentsToolStripMenuItem.Name = "documentsToolStripMenuItem";
			this.documentsToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.documentsToolStripMenuItem.Text = "Documents";
			// 
			// memoEditorToolStripMenuItem
			// 
			this.memoEditorToolStripMenuItem.Name = "memoEditorToolStripMenuItem";
			this.memoEditorToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)(((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift) 
									| System.Windows.Forms.Keys.M)));
			this.memoEditorToolStripMenuItem.Size = new System.Drawing.Size(201, 22);
			this.memoEditorToolStripMenuItem.Text = "Memo Editor";
			// 
			// printingToolStripMenuItem
			// 
			this.printingToolStripMenuItem.Name = "printingToolStripMenuItem";
			this.printingToolStripMenuItem.Size = new System.Drawing.Size(201, 22);
			this.printingToolStripMenuItem.Text = "Printing";
			// 
			// textEditorToolStripMenuItem
			// 
			this.textEditorToolStripMenuItem.Name = "textEditorToolStripMenuItem";
			this.textEditorToolStripMenuItem.Size = new System.Drawing.Size(201, 22);
			this.textEditorToolStripMenuItem.Text = "Text Editor";
			// 
			// panelsToolStripMenuItem
			// 
			this.panelsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.memoToolStripMenuItem,
									this.toolStripMenuItem7,
									this.propertiesPanelToolStripMenuItem});
			this.panelsToolStripMenuItem.Name = "panelsToolStripMenuItem";
			this.panelsToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.panelsToolStripMenuItem.Text = "Panels";
			// 
			// propertiesPanelToolStripMenuItem
			// 
			this.propertiesPanelToolStripMenuItem.Name = "propertiesPanelToolStripMenuItem";
			this.propertiesPanelToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.propertiesPanelToolStripMenuItem.Text = "Properties Panel";
			// 
			// memoToolStripMenuItem
			// 
			this.memoToolStripMenuItem.Name = "memoToolStripMenuItem";
			this.memoToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.memoToolStripMenuItem.Text = "Memos";
			// 
			// toolStripMenuItem7
			// 
			this.toolStripMenuItem7.Name = "toolStripMenuItem7";
			this.toolStripMenuItem7.Size = new System.Drawing.Size(149, 6);
			// 
			// toolStripMenuItem4
			// 
			this.toolStripMenuItem4.Name = "toolStripMenuItem4";
			this.toolStripMenuItem4.Size = new System.Drawing.Size(149, 6);
			// 
			// windowLayoutToolStripMenuItem
			// 
			this.windowLayoutToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
									this.restoreWindowLayoutToolStripMenuItem,
									this.saveWindowLayoutToolStripMenuItem});
			this.windowLayoutToolStripMenuItem.Name = "windowLayoutToolStripMenuItem";
			this.windowLayoutToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
			this.windowLayoutToolStripMenuItem.Text = "Window Layout";
			// 
			// restoreWindowLayoutToolStripMenuItem
			// 
			this.restoreWindowLayoutToolStripMenuItem.Name = "restoreWindowLayoutToolStripMenuItem";
			this.restoreWindowLayoutToolStripMenuItem.Size = new System.Drawing.Size(168, 22);
			this.restoreWindowLayoutToolStripMenuItem.Text = "Restore Last Saved";
			// 
			// saveWindowLayoutToolStripMenuItem
			// 
			this.saveWindowLayoutToolStripMenuItem.Name = "saveWindowLayoutToolStripMenuItem";
			this.saveWindowLayoutToolStripMenuItem.Size = new System.Drawing.Size(168, 22);
			this.saveWindowLayoutToolStripMenuItem.Text = "Save Current Layout";
			// 
			// MainForm
			// 
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.ClientSize = new System.Drawing.Size(524, 396);
			this.Controls.Add(this.dockPane);
			this.Controls.Add(this.statusStrip1);
			this.Controls.Add(this.menuStrip1);
			this.IsMdiContainer = true;
			this.Name = "MainForm";
			this.Text = "MemoApp";
			this.statusStrip1.ResumeLayout(false);
			this.statusStrip1.PerformLayout();
			this.menuStrip1.ResumeLayout(false);
			this.menuStrip1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}
		private System.Windows.Forms.ToolStripMenuItem saveWindowLayoutToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem restoreWindowLayoutToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem windowLayoutToolStripMenuItem;
		private System.Windows.Forms.ToolStripSeparator toolStripMenuItem4;
		private System.Windows.Forms.ToolStripSeparator toolStripMenuItem7;
		private System.Windows.Forms.ToolStripMenuItem memoToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem propertiesPanelToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem panelsToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem textEditorToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem printingToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem memoEditorToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem documentsToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem viewToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
		private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem1;
		private System.Windows.Forms.MenuStrip menuStrip1;
		private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel2;
		private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
		private System.Windows.Forms.StatusStrip statusStrip1;
		private WeifenLuo.WinFormsUI.Docking.DockPanel dockPane;
		#endregion
	}
		</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl12" Alias="eToggle" Group="(Forms.Docking)">
      <ItemsTemplate>		public void eToggle$(CleanNameC)(object sender, EventArgs e) { Toggler($(DataName),typeof($(DataType)),true); }
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl13" Alias="docProperty" Group="(Forms.Docking)">
      <ItemsTemplate>		$(DataType) $(DataName);
		$(DataType) IDockHost.$(DataNameC) { get { return $(DataName); } }
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl14" Alias="DocPanels" Group="(Forms.Docking)">
      <ItemsTemplate />
      <ElementTemplate>	public interface DocHost
	{
		// Documents$(TableTemplate:IDoc,Documents)
		// Panels$(TableTemplate:IDoc,Panels)
	}
		// Documents:
$(TableTemplate:docProperty,Documents)		// Panels:
$(TableTemplate:docProperty,Panels)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl15" Alias="IDoc" Group="(Forms.Docking)">
      <ItemsTemplate>
		$(DataType) $(DataNameC) { get; }</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="HostedDocument" Group="(Forms.Docking)">
      <ItemsTemplate />
      <ElementTemplate>	/// &lt;summary&gt;
	/// Just a Docking-Form (DockContent) for the application ‘Host’.
	/// &lt;/summary&gt;
	public class HostedDocument : DockContent
	{
		protected DataConfig.Forms.IDockingHost Host;
		protected System.Timers.Timer WaitForHost;
		virtual protected void WaitHandler(object sender , System.Timers.ElapsedEventArgs args)
		{
		}
		public HostedDocument(DataConfig.Forms.IDockingHost host)
		{
			if (!DesignMode)
			{
				this.Host = host;
				this.WaitForHost = new System.Timers.Timer(1000);
			}
		}
		public HostedDocument()
		{
			
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="DocumentTemplates" Group="(Forms.Docking)">
      <ItemsTemplate>
	/// &lt;summary&gt;
	/// Description of $(DataType).
	/// &lt;/summary&gt;
	public class $(DataType) : $(DataTypeNative)//DockContent,HostedDocument
	{

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
		}

		public $(DataType)(IDockHost _host) : base(_host)
		{
			InitializeComponent();
		}
		#region Design

		/// &lt;summary&gt;
		/// Designer variable used to keep track of non-visual components.
		/// &lt;/summary&gt;
		private System.ComponentModel.IContainer components = null;
		
		/// &lt;summary&gt;
		/// Disposes resources used by the form.
		/// &lt;/summary&gt;
		/// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
		protected override void Dispose(bool disposing)
		{
			if (disposing) {
				if (components != null) {
					components.Dispose();
				}
			}
			base.Dispose(disposing);
		}
		
		/// &lt;summary&gt;
		/// This method is required for Windows Forms designer support.
		/// Do not change the method contents inside the source code editor. The Forms designer might
		/// not be able to load this method if it was changed manually.
		/// &lt;/summary&gt;
		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof($(DataType)));
			this.SuspendLayout();
			// 
			// $(DataTypeC)
			// 
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.ClientSize = new System.Drawing.Size(739, 268);
			this.Name = "$(DataTypeC)";
			this.Text = "$(DataTypeC)";
			this.ResumeLayout(false);
		}
		#endregion
	}</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="DocFromKey" Group="(Forms.Docking)">
      <ItemsTemplate>
			else if (Key==typeof($(DataType)).FullName) return $(DataName) = new $(DataType)(this);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl5" Alias="Table/View" Group="(System.Data)" SyntaxLanguage="cs,snip">
      <ItemsTemplate />
      <ElementTemplate>
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl6" Alias="." Group="memo.events">
      <ItemsTemplate />
      <ElementTemplate>
		void DiscardData()
		{
			tAltText.Text = string.Empty;
			tAltText.KeyPress -= tAltText_KeyPress;
			toolStripSpringTextBox1.TextBox.TextChanged -= eTTextUpdate;
			sciEditor.TextChanged -= eRTextUpdate;
			btnChildren.ItemClicked -= eContextChanged;
//			cbChildren.ComboBox.SelectedValueChanged -= eContextChanged;
			sciEditor.DataBindings.Clear();
			toolStripSpringTextBox1.TextBox.DataBindings.Clear();
			sciEditor.Text = null;
			toolStripSpringTextBox1.Text = null;
		}
		
		void tAltText_KeyPress(object sender, KeyPressEventArgs e)
		{
//			throw new NotImplementedException();
			switch (e.KeyChar)
			{
				case (char)10:
				case (char)13:
					SelectedRow["alt"] = tAltText.Text;
					break;
			}
		}
		
		void eRowSelected (object sender, EventArgs e)
		{
			if ((Host.PnlMemo.DataGridView1.SelectedRows==null) || Host.PnlMemo.DataGridView1.SelectedRows.Count==0) {
				DiscardData(); return;
			}
			SelectedRow = Host.PnlMemo.DataGridView1.SelectedRows[0].DataBoundItem as DataRowView;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="nativeColumns" Group="(System.Data)" SyntaxLanguage="cs">
      <ItemsTemplate>			if (Table$(TableNameCClean).Columns.Contains("$(DataName)")) Table$(TableNameCClean).Columns["$(DataName)"].DefaultValue = $(DefaultValue);
</ItemsTemplate>
      <ElementTemplate>
		#region Default $(TableNameC) Values
		/**
		 * “nativeColumns” (System.Data) — $(DateTime)
		 * This function should be called after loading the initial
		 * “$(TableName)” table.
		***
		 * Note: you may encounter DataRow assertion errors if a primary-key
		 * exists and is not implemented, handled or supported.
		**/
		internal void Initial$(TableNameCClean)TableValues()
		{
$(FieldValuesNK)
			GlobalData.Tables["$(TableName)"].PrimaryKey = new DataColumn[]{
				GlobalData.Tables["$(TableName)"].Columns["$(PrimaryKey)"]
			};
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="identityValuesNK" Group="tsql">
      <ItemsTemplate>
	@$(CleanName)</ItemsTemplate>
      <ElementTemplate>$(FieldValuesNK,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="tplClassNS" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>using System;
using System.Cor3.Data.Engine;
using System.Data;
using System.Data.SqlClient;

namespace Taylor.Data
{
$(TableTemplate:tplClass)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="query:tsqlUpdate" Group="tsql">
      <ItemsTemplate>
		[$(DataName)] = @$(CleanName)</ItemsTemplate>
      <ElementTemplate>UPDATE [$(TableName)] SET $(FieldValuesNK,Cdf)
WHERE [$(PrimaryKey)] = @$(PrimaryKey);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="query:tsqlConstants" Group="(System.Data.SqlServer)">
      <ItemsTemplate />
      <ElementTemplate>		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_delete_$(TableNameClean) = @"$(TableTemplate:query:Delete,$(TableName))";
		const string query_insert_$(TableNameClean) = @"$(TableTemplate:query:Insert,$(TableName))";
		//const string query_select_last_SomethingOrOther = @"$(TableTemplate:query:SelectLast,$(TableName))";
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select,$(TableName))";
		const string query_select_$(TableNameClean)_byId = @"$(TableTemplate:query:SelectByIdParam,$(TableName))";
		const string query_update_$(TableNameClean) = @"$(TableTemplate:query:tsqlUpdate,$(TableName))";
		// the insert identity constant is used to overwrite a key (identity)
		const string query_insert_identity_$(TableNameClean) = @"$(TableTemplate:query:ident,$(TableName))";
		#endregion
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="tplClass" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>/* oIo — 12/17/2010 — 6:20 AM */
using System;
using System.Cor3.Data.Engine;
using System.Data;
using System.Data.SqlClient;

namespace Prime.App.Data
{
	// template alias: “tplClass”, template group: (System.Data.SqlServer)
	// Generated: $(DateTime)
	//$(Var:ClassName,Memos)
	public class $(TableNameCClean)DataSource : SqlDbA
	{

		const string default_dataset_name = "data";
$(TableTemplate:InnerClassSql)
		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } set { ds = value; } }

		#region Table/View
$(TableTemplate:Table/View)
		#endregion

$(TableTemplate:query:tsqlConstants)
$(TableTemplate:prams)

$(TableTemplate:csQueries)

$(TableTemplate:qSqlLastIntro)
$(TableTemplate:qSqlLast)
$(TableTemplate:nativeColumns)

		public PrimeData()
		{
	#if VAIO
			this.dsource = @"VAIO\SQLEXPRESS";
	#elif PRIME
			this.dsource = @"PRIME7\SQLEXPRESS";
	#endif
			this.dcatalog = @"prime";
		}
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="tplClassDrivers" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>	// template alias: “tplClassDrivers”, template group: (System.Data.SqlServer)
	// $(TableTemplate:newTables)
	// Generated: $(DateTime)
	// $(Var:ClassName,Memos)
	public class PrimeData : SqlDbA
	{
		// this needs to be 
		const string default_dataset_name = "data";

$(TableTemplate:InnerClassSql,$(TableTemplate:newTables))

		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } set { ds = value; } }

		#region Table/View
$(TableTemplate:Table/View,$(TableTemplate:newTables))
		#endregion

		#region Query Constants
$(TableTemplate:query:tsqlConstants,$(TableTemplate:newTables))
		#endregion
$(TableTemplate:prams,$(TableTemplate:newTables))

$(TableTemplate:csQueries,$(TableTemplate:newTables))
$(TableTemplate:qSqlLastIntro,$(TableTemplate:newTables))
$(TableTemplate:qSqlLast)
$(TableTemplate:nativeColumns,$(TableTemplate:newTables))

		public PrimeData()
		{
	#if VAIO
			this.dsource = @"VAIO\SQLEXPRESS";
	#elif PRIME
			this.dsource = @"PRIME7\SQLEXPRESS";
	#endif
			this.dcatalog = @"prime";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="addrCtlMap" Group="addr">
      <ItemsTemplate>
		$(DataName) = string.Format("{0}",table["$(FormatString)"]);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="addrCtlMapClear" Group="addr">
      <ItemsTemplate>
		$(DataName) = string.Format("{0}",table["$(FormatString)"]);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="AddressControl Specific Features" Alias="addrCtlMapBind" Group="addr">
      <ItemsTemplate>
		$(DataName) = string.Format("{0}",table["$(FormatString)"]);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="winforms.events.add.GotAndLostFocus" Group="form">
      <ItemsTemplate>
			this.$(DataName).GotFocus += eGotFocus;
			this.$(DataName).LostFocus += eLostFocus;</ItemsTemplate>
      <ElementTemplate>		void FocusEventAdd()
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="podEventRem" Group="form">
      <ItemsTemplate>
			this.$(DataName).GotFocus -= eGotFocus;
			this.$(DataName).LostFocus -= eLostFocus;</ItemsTemplate>
      <ElementTemplate>		void FocusEventRem()
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="podFocusEvent" Group="form">
      <ItemsTemplate />
      <ElementTemplate>
		public void eGotFocus(object sender, EventArgs e)
		{
			this.OnGotFocus(e);
		}
		public void eLostFocus(object sender, EventArgs e)
		{
			this.OnLostFocus(e);
		}

$(TableTemplate:winforms.events.add.GotAndLostFocus)
$(TableTemplate:podEventRem)
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="newsettings" Group="config">
      <ItemsTemplate />
      <ElementTemplate />
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="clipboardTree" Group="config">
      <ItemsTemplate>			ToolStripMenuItem $(DataName) = new ToolStripMenuItem("$(DataType)",null,$(DataTypeNative));
</ItemsTemplate>
      <ElementTemplate>		#region ClipBoard Item

		TreeNode
			NodeClipboard = null,
			NodeClicked = null,
			NodeClone = null;

		enum clipboardmode
		{
			@default,
			cut,copy,paste,@remove
		}
		clipboardmode clipmode = clipboardmode.@default;
		void eTreeViewLeftMouseClick(object sender, TreeNodeMouseClickEventArgs e)
		{
			MakeContextMenu(e);
		}

		void MakeContextMenu(TreeNodeMouseClickEventArgs args)
		{
			if (NodeContext != null) { NodeContext.Dispose(); NodeContext = null; }
			NodeContext = new ContextMenuStrip();
			
			NodeClicked = args.Node;
			NodeClone = NodeClicked.Clone() as TreeNode;

$(FieldValues)
			NodeContext.Items.AddRange(
				new ToolStripMenuItem[]{ $(TableTemplate:dataNameItems) }
			);
		}
$(TableTemplate:clipboardTreeEvent)
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="dataNameItems" Group="general">
      <ItemsTemplate>$(DataName)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="clipboardTreeEvent" Group="config">
      <ItemsTemplate>		void e$(DataNameC)(object sender, EventArgs e)
		{
			
		}
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="tplClassDriversNS" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>/*
 * oIo — 12/17/2010 — 6:20 AM
 */
using System;
using System.Cor3.Data.Engine;
using System.Data;
using System.Data.SqlClient;

namespace Prime.Data
{
$(TableTemplate:tplClassDrivers)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="FocusElmsGot" Group="form.focus">
      <ItemsTemplate>			$(DataName).GotFocus += eLblFocus;
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="FocusElmsLost" Group="form.focus">
      <ItemsTemplate>			$(DataName).LostFocus -= eLblFocus;
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="FocusElms" Group="form.focus">
      <ItemsTemplate />
      <ElementTemplate>		void TextFocusAdd()
		{
$(TableTemplate:FocusElmsGot)
		}
		void TextFocusRem()
		{
$(TableTemplate:FocusElmsLost)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="focusSwitch" Group="form.focus">
      <ItemsTemplate>				case "$(DataName)": newSelL = $(DataType); break;
</ItemsTemplate>
      <ElementTemplate>		void eLblFocus(object sender, EventArgs e)
		{
			if (lastSel!=null)
			{
				lastSel.BackColor = UserControl.DefaultBackColor;
			}
			string newSel = (sender as Control).Name;
			Control newSelL = null;
			switch (newSel)
			{
$(FieldValues)
			}
			newSelL.BackColor = Color.Red;
			lastSel = newSelL;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="x">
      <ItemsTemplate>
		public $(DataTypeNative) $(CleanName) { get { return this["$(CleanName)"]; } set { this["$(CleanName)"] = value; } }</ItemsTemplate>
      <ElementTemplate>	public class $(TableNameClean)Item
	{
		const string fieldNames = "$(TableTemplate:classwrapper.const,$(TableName))";
		Dictionary&lt;string,object&gt; DictValues;
		public object this[string Key] { get { return DictValues[Key]; } set { DictValues[Key] = value; } }
		
		$(FieldValues)
		
		public $(TableNameClean)Item(DataRowView row)
		{
			string[] keys = fieldNames.Split(',');
			foreach (string key in keys)
			{
				DictValues.Add(key,row[key]);
			}
		}
		public $(TableNameClean)Item(DataRow row)
		{
			string[] keys = fieldNames.Split(',');
			foreach (string key in keys)
			{
				DictValues.Add(key,row[key]);
			}
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="dstateTrans" Group="prime.web.db.sql">
      <ItemsTemplate />
      <ElementTemplate>
	public class Sample_$(TableNameCClean) : SqlDbA
	{
		public class DataState
		{
			public $(ConnectionT) Connection;
			public $(CommandT) Command;
			public $(AdapterT) Adaptor;
			
			public DataState(string query, OleDbConnection connection)
			{
				Connection = connection;
				Command = new $(CommandT)(query,Connection);
				$(AdapterT) adaptor = new $(AdapterT)(Command);
			}
		}
		public DataState GetState(string query)
		{
			return new DataState(query,Connection);
		}
		#region const
		
		DataSet GlobalData = new DataSet("memos");

		const string tbl_$(TableNameClean) = "$(TableName)";
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_delete_$(TableNameClean) = @"$(TableTemplate:query:Delete)";
		const string query_insert_$(TableNameClean) = @"$(TableTemplate:query:Insert)";
		//const string query_select_last_SomethingOrOther = @"$(TableTemplate:query:SelectLast)";
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		const string query_update_$(TableNameClean) = @"$(TableTemplate:query:Update)";
		const string query_insert_identity_$(TableNameClean) = @"$(TableTemplate:query:ident)";
		#endregion

		#endregion
		
		// this call uses the query_select_last_SomethingOrOther constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// intended for an Access10 class initially.  I suppose it would work for SqlServer.
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using (SqlConnection connection = Connection) {
				using (SqlCommand selector = new SqlCommand(query,connection)) {
					using (SqlDataAdapter adaptor = new SqlDataAdapter(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}
		public Sample_$(TableNameCClean)()
		{
			dsource = @"OOO\SQL2005EXPRESS";
			dcatalog = "memos";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="query:InsertTran" Group="prime.sql">
      <ItemsTemplate>
	[$(FieldIndex)]</ItemsTemplate>
      <ElementTemplate>INSERT INTO [$(TableName)] ($(FieldValuesNK,Cdf))
VALUES($(TableTemplate:identityValuesNK,$(TableName)));</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="note the fact that we tend to switch between using Description and DataType" Alias="query:ident3" Group="sql.data">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>SET IDENTITY_INSERT [$(TableName)] on
Go
INSERT INTO [$(TableName)]($(FieldValues,Cdf))
VALUES ($(TableTemplate:identityIndexes,$(TableName)));
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="identityIndexes3" Group="tsql">
      <ItemsTemplate>
	{$(FieldIndex)}</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="dstateTr" Group="prime.web.db.sql">
      <ItemsTemplate />
      <ElementTemplate>
	public class Sample_$(TableNameCClean) : SqlDbA
	{
		public class DataState
		{
			public $(ConnectionT) Connection;
			public $(CommandT) Command;
			public $(AdapterT) Adaptor;
			
			public DataState(string query, $(ConnectionT) connection)
			{
				Connection = connection;
				Command = new $(CommandT)(query,Connection);
				$(AdapterT) adaptor = new $(AdapterT)(Command);
			}
		}
		public DataState GetState(string query)
		{
			return new DataState(query,Connection);
		}
		#region const
		
		DataSet GlobalData = new DataSet("$(TableName)");

		const string tbl_$(TableNameClean) = "$(TableName)";
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		#endregion

		#endregion
		
		// this call uses the query_select_last_SomethingOrOther constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using (SqlConnection connection = Connection) {
				using (SqlCommand selector = new SqlCommand(query,connection)) {
					using (SqlDataAdapter adaptor = new SqlDataAdapter(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}
		public Sample_$(TableNameCClean)()
		{
			dsource = @"OOO\SQL2005EXPRESS";
			dcatalog = "$(TableName)";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="row.value.rep3" Group="prime.web">
      <ItemsTemplate>
					Reformat(reader,"$(DataName)")</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="xpando" Group="prime.forms">
      <ItemsTemplate>
				case cat.$(DataTypeNative):
					tsLblRemove.Text = string.Format("Remove $(Description) #{0}…", $(DataName).CurrentUserControl.CountNo);
					tsLblRemove.ToolTipText = string.Format("Remove $(Description). #{0}…", $(DataName).CurrentUserControl.CountNo);
					eXpando($(DataType),null);
					break;</ItemsTemplate>
      <ElementTemplate>
		enum cat { $(TableTemplate:dataTypeNativeItems) }
		
		// XPANDO DIC
$(TableTemplate:dictnativeType,$(TableName))

		DICT&lt;cat,XPanderPanel&gt; panelCats = defaultCats;
		
		void AddObject(cat ctg)
		{
			switch (ctg)
			{$(FieldValues)
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="dataTypeItems" Group="general">
      <ItemsTemplate>$(DataType)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="dataTypeNativeItems" Group="general">
      <ItemsTemplate>$(DataTypeNative)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="dictNativeType" Group="general">
      <ItemsTemplate>
				xdic.Add(cat.$(DataTypeNative),$(DataType));</ItemsTemplate>
      <ElementTemplate>
		static public DICT&lt;cat,XPanderPanel&gt; defaultCats
		{
			get
			{
				DICT&lt;cat,XPanderPanel&gt; xdic = new DICT&lt;cat,XPanderPanel&gt;();$(FieldValues)
				return xdic;
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="FromXmlElm" Group="prime.forms">
      <ItemsTemplate>			if (elm.HasAttribute("$(DefaultValue)")) tlen.Text = elm.Attributes["$(DefaultValue)"].Value;
</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="varTemplates" Group=".pre">
      <ItemsTemplate />
      <ElementTemplate>		void SetTemplateValues()
		{
			richTextBox1.AutoComplete.List.Clear();
			richTextBox1.AutoComplete.List.Add("$(FieldValues)");
			richTextBox1.AutoComplete.List.Add("$(FieldValues)");
			richTextBox1.AutoComplete.List.Add("$(FieldValues,Cdf)");
			richTextBox1.AutoComplete.List.Add("$(FieldValuesNK)");
			richTextBox1.AutoComplete.List.Add("$(FieldValuesNK,Cdf)");
			richTextBox1.AutoComplete.List.Add("$(DbType)");
			richTextBox1.AutoComplete.List.Add("$(FriendlyName)");
			richTextBox1.AutoComplete.List.Add("$(TableName)");
			richTextBox1.AutoComplete.List.Add("$(TableNameC)");
			richTextBox1.AutoComplete.List.Add("$(TableNameClean)");
			richTextBox1.AutoComplete.List.Add("$(tablenameclean)");
			richTextBox1.AutoComplete.List.Add("$(TableNameCClean)");
			richTextBox1.AutoComplete.List.Add("$(TableType)");
			richTextBox1.AutoComplete.List.Add("$(tabletype)");
			richTextBox1.AutoComplete.List.Add("$(PK)");
			richTextBox1.AutoComplete.List.Add("$(pk)");
			richTextBox1.AutoComplete.List.Add("$(PrimaryKey)");
			richTextBox1.AutoComplete.List.Add("$(AdapterNs)");
			richTextBox1.AutoComplete.List.Add("$(AdapterT)");
			richTextBox1.AutoComplete.List.Add("$(AdapterNsT)");
			richTextBox1.AutoComplete.List.Add("$(CommandNs)");
			richTextBox1.AutoComplete.List.Add("$(CommandT)");
			richTextBox1.AutoComplete.List.Add("$(CommandNsT)");
			richTextBox1.AutoComplete.List.Add("$(ConnectionT)");
			richTextBox1.AutoComplete.List.Add("$(ConnectionNsT)");
			richTextBox1.AutoComplete.List.Add("$(ConnectionNs)");
			richTextBox1.AutoComplete.List.Add("$(ReaderNs)");
			richTextBox1.AutoComplete.List.Add("$(ReaderT)");
			richTextBox1.AutoComplete.List.Add("$(ReaderNsT)");
			richTextBox1.AutoComplete.List.Sort();
			
			richTextBox2.AutoComplete.List.Clear();
			richTextBox2.AutoComplete.List.Add("$(Date)");
			richTextBox2.AutoComplete.List.Add("$(Time)");
			richTextBox2.AutoComplete.List.Add("$(DateTime)");
			richTextBox2.AutoComplete.List.Add("$(CleanName)");
			richTextBox2.AutoComplete.List.Add("$(FriendlyName)");
			richTextBox2.AutoComplete.List.Add("$(FriendlyNameC)");
			richTextBox2.AutoComplete.List.Add("$(FieldIndex)");
			richTextBox2.AutoComplete.List.Add("$(DataType)");
			richTextBox2.AutoComplete.List.Add("$(datatype)");
			richTextBox2.AutoComplete.List.Add("$(DataTypeNative)");
			richTextBox2.AutoComplete.List.Add("$(datatypenative)");
			richTextBox2.AutoComplete.List.Add("$(DataName)");
			richTextBox2.AutoComplete.List.Add("$(dataname)");
			richTextBox2.AutoComplete.List.Add("$(DataNameC)");
			richTextBox2.AutoComplete.List.Add("$(FormatString)");
			richTextBox2.AutoComplete.List.Add("$(MaxLMAX)");
			richTextBox2.AutoComplete.List.Add("$(nmax)");
			richTextBox2.AutoComplete.List.Add("$(smax)");
			richTextBox2.AutoComplete.List.Add("$(MaxLength)");
			richTextBox2.AutoComplete.List.Add("$(IsString)");
			richTextBox2.AutoComplete.List.Add("$(IsBool)");
			richTextBox2.AutoComplete.List.Add("$(IsNum)");
			richTextBox2.AutoComplete.List.Add("$(Native)");
			richTextBox2.AutoComplete.List.Add("$(max)");
			richTextBox2.AutoComplete.List.Add("$(UseFormat)");
			richTextBox2.AutoComplete.List.Add("$(IsNullable)");
			richTextBox2.AutoComplete.List.Add("$(Description)");
			richTextBox2.AutoComplete.List.Add("$(DefaultValue)");
			
			richTextBox2.AutoComplete.List.Add("$(TableName)");
			richTextBox2.AutoComplete.List.Add("$(TableNameC)");
			richTextBox2.AutoComplete.List.Add("$(TableNameClean)");
			richTextBox2.AutoComplete.List.Add("$(tablenameclean)");
			richTextBox2.AutoComplete.List.Add("$(TableNameCClean)");
			richTextBox2.AutoComplete.List.Add("$(TableType)");
			richTextBox2.AutoComplete.List.Add("$(tabletype)");
			richTextBox2.AutoComplete.List.Add("$(PK)");
			richTextBox2.AutoComplete.List.Add("$(pk)");
			richTextBox2.AutoComplete.List.Add("$(PrimaryKey)");
			richTextBox2.AutoComplete.List.Add("$(AdapterNs)");
			richTextBox2.AutoComplete.List.Add("$(AdapterT)");
			richTextBox2.AutoComplete.List.Add("$(AdapterNsT)");
			richTextBox2.AutoComplete.List.Add("$(CommandNs)");
			richTextBox2.AutoComplete.List.Add("$(CommandT)");
			richTextBox2.AutoComplete.List.Add("$(CommandNsT)");
			richTextBox2.AutoComplete.List.Add("$(ConnectionT)");
			richTextBox2.AutoComplete.List.Add("$(ConnectionNsT)");
			richTextBox2.AutoComplete.List.Add("$(ConnectionNs)");
			richTextBox2.AutoComplete.List.Add("$(ReaderNs)");
			richTextBox2.AutoComplete.List.Add("$(ReaderT)");
			richTextBox2.AutoComplete.List.Add("$(ReaderNsT)");
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="order-x" Group="prime.forms">
      <ItemsTemplate>
		this.$(Description).DataBindings["Text"].Read();//"$(DataName)"</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="printing" Group="printing">
      <ItemsTemplate>
		public $(DataTypeNative) $(FriendlyNameC){ get;set; }</ItemsTemplate>
      <ElementTemplate />
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="orderOne" Group="bind">
      <ItemsTemplate>
		SetB($(DataName),row,"$(Description)");</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="bindClear" Group="bind">
      <ItemsTemplate>
		$(DataName).DataBindings.Clear(); $(DataName).Text = string.Empty;</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="adb" Group="prime.web.db.mdb">
      <ItemsTemplate />
      <ElementTemplate>
	public class Sample_$(TableNameCClean) : Access10
	{
		public class DataState
		{
			public $(ConnectionT) Connection;
			public $(CommandT) Command;
			public $(AdapterT) Adaptor;
			
			public DataState(string query, $(ConnectionT) connection)
			{
				Connection = connection;
				Command = new $(CommandT)(query,Connection);
				$(AdapterT) adaptor = new $(AdapterT)(Command);
			}
		}
		public DataState GetState(string query)
		{
			return new DataState(query,Connection);
		}
		#region const
		
		DataSet GlobalData = new DataSet("$(TableName)");

		const string tbl_$(TableNameClean) = "$(TableName)";
		public DataTable Table$(TableNameCClean) { get { return GlobalData.Tables[tbl_$(TableNameClean)]; } }
		public DataView View$(TableNameCClean) { get { return Table$(TableNameCClean).DefaultView; } }

		#region Query Const for “$(TableName)”
		// note that you should re-name any parameter named “@xid” to
		const string query_select_$(TableNameClean) = @"$(TableTemplate:query:Select)";
		#endregion

		#endregion
		
		// this call uses the ‘query_select_last_SomethingOrOther’ constant defined in the
		// constants template, also using the DataSet as defined in the Class template.
		void Select$(TableNameCClean)()
		{
			int Records = 0;
			Select$(TableNameCClean)(query_select_$(TableNameClean),tbl_$(TableNameClean), ref Records);
		}

		// this is used in an Access10 class where abstraction provides a Connection
		void Select$(TableNameCClean)(string query, string tblName, ref int recordsEffected)
		{
			using ($(ConnectionT) connection = Connection) {
				using ($(CommandT) selector = new $(CommandT)(query,connection)) {
					using ($(AdapterT) adaptor = new $(AdapterT)(selector)) {
						adaptor.SelectCommand = selector;
						connection.Open();
						LastRecordsAffected = recordsEffected = selector.ExecuteNonQuery();/* = */
						adaptor.Fill(GlobalData,tblName);
						connection.Close();
					}
				}
			}
		}
		public Sample_$(TableNameCClean)() : base(@"d:\dev\YOURDATABASE.mdb")
		//public Sample_$(TableNameCClean)()
		{
		//	dsource = @"OOO\SQL2005EXPRESS";
		//	dcatalog = "tOrders";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="newTable" Group="prime.struct">
      <ItemsTemplate>
			table.Columns.Add("$(DataName)",typeof($(DataTypeNative)));</ItemsTemplate>
      <ElementTemplate>
		static public void SetupTable(DataTable table)
		{$(FieldValues)
			table.PrimaryKey = new DataColumn[]{ table.Columns["$(PK)"] };
		}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="customer" Group="prime.orderControl">
      <ItemsTemplate>
		row["$(DataName)"] = info.$(Description);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="GotF+" Group="prime.orderControl">
      <ItemsTemplate>
			this.$(DataName).GotFocus += this.eGotFocus;
			this.$(DataName).LostFocus += this.eLostFocus;</ItemsTemplate>
      <ElementTemplate>		public void AddLostFocus()
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="GotF-" Group="prime.orderControl">
      <ItemsTemplate>
			this.$(DataName).GotFocus -= this.eGotFocus;
			this.$(DataName).LostFocus -= this.eLostFocus;</ItemsTemplate>
      <ElementTemplate>		public void RemGotFocus()
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="GotF" Group="prime.orderControl">
      <ItemsTemplate />
      <ElementTemplate>
		#region Generated “GotF”
		public event EventHandler&lt;SelectionNotify&gt; ControlCaretChanged;
		protected virtual void OnControlCaretChanged(object sender, SelectionNotify e)
		{
			if (ControlCaretChanged != null) {
				ControlCaretChanged(sender, e);
			}
		}
		public void eGotFocus(object sender, EventArgs e)
		{$(TableTemplate:CkF,$(TableName))
			(sender as Control).BackColor = System.Colors.LightYellow;
		}
		public void eLostFocus(object sender, EventArgs e)
		{
			OnControlCaretChanged(sender, string.Empty);
			(sender as Control).BackColor = System.Colors.White;
		}
$(TableTemplate:GotF+,$(TableName))
$(TableTemplate:GotF-,$(TableName))
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="CkF" Group="prime.orderControl">
      <ItemsTemplate>
			case "$(DataName)": OnControlCaretChanged(sender, "$(Description)"); break;</ItemsTemplate>
      <ElementTemplate>
			string sendername = (sender as Control).Name;
			switch (sendername)
			{$(FieldValues)
			}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="WPF.UC" Group="wpf">
      <ItemsTemplate>
		&lt;$(DataType)
			x:Name="$(DataName)"
			Icon="..\Images\Strikethrough.png"
			ToolTip="$(Description)"
			SizeDefinition="Small"
			Size="Small"
		/&gt;</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="Zcta" Group="(string)" SyntaxLanguage="cs">
      <ItemsTemplate>
			$(DataNameC) = IncramentalString(stream,$(MaxLength))</ItemsTemplate>
      <ElementTemplate>using System.IO;

	public class $(TableName) {
$(TableTemplate:ZctaValues)

		string IncramentalString(Stream stream, int len, bool trim)
		{
			string returnValue = string.Empty;
			using (BinaryReader br = new BinaryReader(stream,Encoding.ASCII))
			{
				returnValue = System.Text.Encoding.Default.GetString(br.ReadBytes(len));
			}
			if (trim) return returnValue.Trim();
			return returnValue;
		}
		public string Load()
		{
			string str = ControlUtil.FGet("Text File|*.txt|All Files|*");
			return Load(str);
		}
		public string Load(string fileName)
		{
			if (File.Exists(fileName)) return Load(new FileStream());
			return string.Empty;
		}
		public string Load(Stream stream)
		{$(FieldValues,Cdf)
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="ZctaValues" Group="(string)" SyntaxLanguage="cs">
      <ItemsTemplate>
		$(datatypenative) $(DataName);
		public $(DataType) $(DataNameC) { get { return $(DataName); } set { $(DataName) = value; } }</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="data.elements" Group="wpf" SyntaxLanguage="cs">
      <ItemsTemplate>
			$(DataName).InvalidateProperty($(DataType).TextProperty);</ItemsTemplate>
      <ElementTemplate>		public void SetBindingValue(object value)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="data.set" Group="wpf" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>		public void SetBindingValue(object value)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="data" Group="wpf" SyntaxLanguage="cs">
      <ItemsTemplate />
      <ElementTemplate>

		object FocusElement { get;set; }
		
		public void ElementGotFocus(object sender, RoutedEventArgs e) {  }
				
$(TableTemplate:data.elements,$(TableName))
		public void SetBindingValue()
		{
		}

		public void ClearBindingValues()
		{
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="promileinfo" Group="ProMiles">
      <ItemsTemplate />
      <ElementTemplate>
	
	public class ProMilesTableInfo
	{
		const string default_dataset_name = "data";

$(TableTemplate:InnerClassSql,Route,StateMiles,MilesInOrder)

		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } }

		#region Table/View
$(TableTemplate:Table/View,Route,StateMiles,MilesInOrder)
		#endregion
		// the tables that we're interested in
		// Route,StateMiles,MilesInOrder
$(TableTemplate:nativeColumns,Route,StateMiles,MilesInOrder)

	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl2" Alias="metaClass" Group="midi">
      <ItemsTemplate />
      <ElementTemplate>namespace MIDI
{
	public class EventCapsule
	{
		
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl3" Alias="metaConst" Group="midi">
      <ItemsTemplate>
		internal const int $(DataNameC) = $(DefaultValue);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl4" Alias="constEnu" Group="midi">
      <ItemsTemplate>
			$(DataNameC)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="pdClass" Group="www">
      <ItemsTemplate />
      <ElementTemplate>	// template alias: “pdClass”, template group: (System.Data.SqlServer)
	// Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types
	// Generated: $(DateTime)
	// $(Var:ClassName,Memos)
	/// &lt;summary&gt;
	/// Note that this class's Select query is parameter-less such as
	/// &lt;para&gt;
	/// ‘SELECT * FROM [@TABLE];’
	/// &lt;/para&gt;
	public class Prime_Data : SqlDbA
	{

		#region Constants
		const string default_dataset_name = "data";

$(TableTemplate:InnerClassSql,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion

		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } }

		#region Table/View
$(TableTemplate:Table/View,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion
		#region QueryConstants
		$(TableTemplate:query:tsqlConstants,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion
		#region Parameters
		$(TableTemplate:prams,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion
		#region Queries
$(TableTemplate:csQueries,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion
		#region LastEntry Functions
$(TableTemplate:qSqlLastIntro,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
$(TableTemplate:qSqlLast)
		#endregion
		#region Default Values
$(TableTemplate:nativeColumns,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
		#endregion

		public Prime_Data()
		{
			this.dsource = @"VAIO\SQLEXPRESS";
			this.dcatalog = @"Prime_Data";
		}
	}
	</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="pdNamespace" Group="www">
      <ItemsTemplate />
      <ElementTemplate>/*
 * oIo — 12/17/2010 — 6:20 AM
 */
using System;
using System.Cor3.Data.Engine;
using System.Data;
using System.Data.SqlClient;

namespace wwwroot
{
$(TableTemplate:pdClass)
}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="fieldvalues" Group="www.root">
      <ItemsTemplate>
            &lt;asp:Parameter Name="$(DataName)" Type="$(DataTypeNative)" /&gt;</ItemsTemplate>
      <ElementTemplate>&lt;!--//
SELECT RTRIM(first_name) + ' ' + RTRIM(last_name) AS full_name FROM [Drivers] ORDER BY full_name
//--&gt;
&lt;asp:SqlDataSource ID="$(TableNameC)_SqlDataSource" runat="server" ConnectionString="&lt;%$ ConnectionStrings:INSERT_CONNECTION_STRING_HERE %&gt;"
        DeleteCommand="DELETE FROM [$(TableName)] WHERE [$(PrimaryKey)] = @$(PrimaryKey)"
        InsertCommand="INSERT INTO [PODs] ([invoice_number], [driver], [customer], [destination], [date], [time], [pieces], [price], [POD_name]) VALUES (@invoice_number, @driver, @customer, @destination, @date, @time, @pieces, @price, @POD_name)"
        SelectCommand="SELECT POD_id, invoice_number, driver, customer, destination, date, pieces, price, POD_name FROM PODs ORDER BY date DESC" 
        UpdateCommand="UPDATE [PODs] SET [invoice_number] = @invoice_number, [driver] = @driver, [destination] = @destination, [date] = @date, [time] = @time, [pieces] = @pieces, [price] = @price, [POD_name] = @POD_name WHERE [POD_id] = @POD_id"&gt;
        &lt;UpdateParameters&gt;$(FieldValuesNK)
        &lt;/UpdateParameters&gt;
        &lt;InsertParameters&gt;$(FieldValuesNK)
        &lt;/InsertParameters&gt;
        &lt;DeleteParameters&gt;
            &lt;asp:Parameter Name="$(PrimaryKey)" Type="$(BigInt)" /&gt;
        &lt;/DeleteParameters&gt;
&lt;/asp:SqlDataSource&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="flex_class_model" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate>
		private var __$(FriendlyName):$(FlashDataType);
		public function get $(FriendlyName)():$(FlashDataType) { return __$(FriendlyName); }
		public function set $(FriendlyName)(value:$(FlashDataType)):void { fire("$(DataName)", __$(FriendlyName) = value); }</ItemsTemplate>
      <ElementTemplate>package tfw.data
{
	import mvc.BasicModel;
	import flash.net.URLVariables;
	[Event("valueChanged","flash.events.Event")]
	[Bindable]
	// Primary = ‘$(PK)’
	// in many cases we may note that data-binding will comply
	// with a specific datatype, while it would be nice to know
	// the type we are dealing with: hence the PrimaryKeyType “notation”
	public class $(TableCleanNameC)Model extends BasicModel
	{
		private const PK_NAME:String = "$(PrimaryKey)";
		public function get PrimaryKeyName():String { return PK_NAME; }
		public function get PrimaryKeyType():String { return String( typeof $(PKCleanName) ); }
		public function get PrimaryKeyValue():* { return $(PKCleanName); }
		/**
		 * allows for event triggering.
		 * @param fieldName:String
		 * @param fieldValue:*
		 */
		public function fire(fieldName:String,fieldValue:*):void
		{
			dispatchEvent(new Event("valueChanged",{ fieldName: fieldName, fieldValue: fieldValue }));
		}
		
$(FieldValues)
		
		static public function Provide(o:Object):$(TableCleanNameC)Model
		{
			if (o is $(TableCleanNameC)Model) return o as $(TableCleanNameC)Model;
			else throw new Error("the object must be of type: $(TableCleanNameC)Model.");
		}

$(TableTemplate:flex_class_init,$(TableName))
$(TableTemplate:flex_url_params,$(TableName))
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="query:SelectByIdParam" Group="sql.data">
      <ItemsTemplate />
      <ElementTemplate>SELECT * FROM [$(TableName)] WHERE [$(PKDataName)] = @$(PKCleanName)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="classwrapper" Group="cs">
      <ItemsTemplate>
		public $(DataTypeNative) $(CleanName) { get { return ($(DataTypeNative))this["$(CleanName)"]; } set { this["$(CleanName)"] = value; } }</ItemsTemplate>
      <ElementTemplate>	public class $(TableNameClean)Item
	{
		const string fieldNames = "$(TableTemplate:classwrapper.const,$(TableName))";
		Dictionary&lt;string,object&gt; DictValues;
		public object this[string Key] { get { return DictValues[Key]; } set { DictValues[Key] = value; } }
		
		$(FieldValues)
		
		public void ToTable(DataTable table)
		{
			DataRow row = table.NewRow();
			string[] keys = fieldNames.Split(',');
			foreach (string key in keys) row[key] = DictValues[key];
			table.Rows.Add(row);
		}
		
		public $(TableNameClean)Item()
		{
		}
		public $(TableNameClean)Item(DataRowView row)
		{
			string[] keys = fieldNames.Split(',');
			DictValues = new Dictionary&lt;string,object&gt;();
			foreach (string key in keys) DictValues.Add(key,row[key]);
		}
		public $(TableNameClean)Item(DataRow row)
		{
			string[] keys = fieldNames.Split(',');
			DictValues = new Dictionary&lt;string,object&gt;();
			foreach (string key in keys) DictValues.Add(key,row[key]);
		}
	}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl0" Alias="classwrapper.const" Group="cs">
      <ItemsTemplate>$(DataName)</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new tpl1" Alias="classwrapper.row" Group="cs">
      <ItemsTemplate />
      <ElementTemplate>namespace Prime.Data
{
	// a template to contain data classes for a specific table
	// we're going to ignore the name of the primary table and 
	// just assert the types as common types.
	// Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types

$(TableTemplate:classwrapper,Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc class" Group="mvc">
      <ItemsTemplate>
		/// &lt;summary&gt;driverno Field: Name="$(DataName)" Type="$(DataTypeNullable)", $(smax) &lt;/summary&gt;
		[DisplayName(@"$(Description)")] public $(DataTypeNullable) $(FriendlyNameC) {
			get { return _$(FriendlyName); } set { _$(FriendlyName) = value; }
		} $(DataTypeNullable) _$(FriendlyName) = default($(Native));
</ItemsTemplate>
      <ElementTemplate>	#region $(TableCleanNameC)Model

	/// &lt;summay&gt;$(TableCleanNameC)Model, PrimaryKey=‘$(PrimaryKey)’&lt;/summary&gt;
	/// &lt;remarks&gt;&lt;/remarks&gt;
	public class $(TableCleanNameC)Model : RootModel {

		public override string TableName { get { return table_name; } }

		#region static/const
$(TableTemplate:modelColumns,$(TableName))
$(TableTemplate:mvc type,$(TableName))
$(TableTemplate:mvc const,$(TableName))
$(TableTemplate:mvc cols,$(TableName))
$(TableTemplate:mvc rowfrom,$(TableName))
$(TableTemplate:mvc rowto,$(TableName))
		#endregion

		#region Properties$(FieldValues)
		#endregion
	
$(TableTemplate:jsonColsSimple,$(TableName))
$(TableTemplate:jsonColsComplex,$(TableName))
$(TableTemplate:getValue,$(TableName))
$(TableTemplate:setValues,$(TableName))
	
	}
	#endregion
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc namespace prime" Group="!CHECK! mvc">
      <ItemsTemplate />
      <ElementTemplate>// $(Date) $(Time)
// the new models: $(TableTemplate:newTables)
// tDriver,customerContacts,order,voucher,rateFlat,rateFlatType,transports,driver_map,viewDriverTransports



// This has been left here for development: testing and preventing crashes
using System;
using System.ComponentModel;
using System.Web.Mvc;
using System.Cor3.Mvc;
using System.Cor3.Data;
using System.Cor3.Data.Engine;
using System.Data;

/// &lt;summary&gt;
/// • 110607 Made changes to ClassModel as to inherit a particular RootModel class.
/// &lt;/summary&gt;
namespace mvcx.Models {
$(TableTemplate:mvc Root)
$(TableTemplate:mvc class,$(TableTemplate:newTables))
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc namespace prime_data" Group="!CHECK! mvc">
      <ItemsTemplate />
      <ElementTemplate>// Generated by a tool: $(Date) $(Time)
// Generated tables: Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types
using System;
using System.ComponentModel;
using System.Web.Mvc;
using System.Cor3.Mvc;
using System.Cor3.Data;
using System.Cor3.Data.Engine;
using System.Data;

/// &lt;summary&gt;
/// • 110607 Made changes to ClassModel as to inherit a particular RootModel class.
/// &lt;/summary&gt;
namespace mvcx.ModelsOld {

$(TableTemplate:mvc Root)

$(TableTemplate:mvc class,Common_Stops,Contacts,Customers,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,Quotes,Standard_Rates,Stop_Per_Type,Truck_Types)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc rowfrom" Group="mvc">
      <ItemsTemplate>
			if (row[col_$(FriendlyName)]!=DBNull.Value) model.$(FriendlyNameC) = row[col_$(FriendlyName)] as $(DataTypeNullable);</ItemsTemplate>
      <ElementTemplate>		/// &lt;summary&gt;adds data to the DataRowView&lt;/summary&gt;
		static public $(TableCleanNameC)Model FromRowView(DataRowView row)
		{
			$(TableCleanNameC)Model model = new $(TableCleanNameC)Model();
			if (row==null) return model;
$(FieldValues)
			return model;
		}
		static public implicit operator $(TableCleanNameC)Model(DataRowView row) { return FromRowView(row); }</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc cols" Group="mvc">
      <ItemsTemplate>col_$(FriendlyName)</ItemsTemplate>
      <ElementTemplate>		//
		public const string actionName = "list-$(TableName)";
		static internal protected readonly string[] tcols = { $(FieldValues,Cdf) };
		static internal protected readonly string   tkey  = "$(PKCleanName,Nodash)";</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc rowto" Group="mvc">
      <ItemsTemplate>
			row[col_$(FriendlyName)] = model.$(FriendlyNameC);</ItemsTemplate>
      <ElementTemplate>		/// &lt;summary&gt;adds data to the DataRowView&lt;/summary&gt;
		static public void ToRowView($(TableCleanNameC)Model model, DataRowView row)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc const" Group="mvc">
      <ItemsTemplate>col_$(FriendlyName) = "$(dataname)"</ItemsTemplate>
      <ElementTemplate>		internal const string table_name = "$(TableName)";
		internal const string $(FieldValues,Cdf);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc type" Group="mvc">
      <ItemsTemplate> typeof($(DataTypeNullable))</ItemsTemplate>
      <ElementTemplate>		internal static readonly Type[] tcoltypes = new Type[]{$(FieldValues,Cdf) };</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="itemRenderer" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate />
      <ElementTemplate>package tfw.controls
{
	import spark.components.HGroup;
	import spark.components.Label;
	import spark.components.supportClasses.ItemRenderer;
	import spark.components.VGroup;
	import tfw.data.ClientIdentity;
	public class ContactItemRenderer extends ItemRenderer
	{
		// here is a custom script (not generated), consisting of a set
		// of containers for the elements that will be generated such as the
		// s:TextInput and s:Label elements that would be generated.
		
		// a side note: some helpful functions would be useful that may convert
		// a simple description to our respective elements, here.
		
		private var Group:VGroup;
		private var Group2:HGroup;

		private var lbClientName:Label;
		public function get LabelClientName():Label { return lbClientName; }
		public function get ClientName():String { return lbClientName.text; }
		public function set ClientName(value:String):void { lbClientName.text = value; }

		private var lbClientCity:Label;
		public function get LabelClientCity():Label { return lbClientCity; }
		public function get ClientCity():String { return lbClientCity.text; }
		public function set ClientCity(value:String):void { lbClientCity.text = value; }

		private var lbClientState:Label;
		public function get LabelClientState():Label { return lbClientState; }
		public function get ClientState():String { return lbClientState.text; }
		public function set ClientState(value:String):void { lbClientState.text = value; }

		private var lbClientZip:Label;
		public function get LabelClientZip():Label { return lbClientZip; }
		public function get ClientZip():String { return lbClientZip.text; }
		public function set ClientZip(value:String):void { lbClientZip.text = value; }

		/**
		 * Crates a default ContactItemRenderer instance.
		 * Note that this class is designed to work with tfw.data.ClientIdentity:Object.
		 */

		public function ContactItemRenderer() : void
		{
			super();
			Group = new VGroup();
			Group2 = new HGroup();
			Group				.paddingLeft =
			Group				.paddingBottom =
			Group				.paddingRight =
			Group				.paddingTop = 3;
			Group				.gap = 2;
			Group2				.percentWidth = 100;
			Group2				.paddingLeft = 10;

			this				.addElement( Group );

			this.lbClientCity	= new Label();
			this.lbClientCity	.name = "lbClientCity";
			Group2				.addElement(lbClientCity);

			this.lbClientName	= new Label();
			this.lbClientName	.name = "lbClientName";
			this.lbClientName	.percentWidth = 100;
			Group				.addElement(lbClientName);
			
			this.lbClientState	= new Label();
			this.lbClientState	.name = "lbClientState";
			Group2				.addElement(lbClientState);

			this.lbClientZip	= new Label();
			this.lbClientZip	.name = "lbClientState";
			Group2				.addElement(lbClientZip);

			this.lbClientName	.setStyle("fontWeight", "bold");
			this.lbClientCity	.setStyle("fontSize", 9);
			this.lbClientState	.setStyle("fontSize", 9);
			this.lbClientZip	.setStyle("fontSize", 9);
			
			Group				.addElement(Group2);
			Group				.executeBindings();
		}
		
		override public function get data():Object 
		{
			return super.data;
		}

		override public function set data(value:Object):void 
		{
			super.data = value;
			if (!(data is ClientIdentity)) return;
			ClientName = (data as ClientIdentity).name;
			ClientCity = (data as ClientIdentity).city;
			ClientState = (data as ClientIdentity).state;
			ClientZip = (data as ClientIdentity).zip;
		}
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="itemsPanelLabel" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate />
      <ElementTemplate>
		private var lbClientName:Label;
		public function get LabelClientName():Label { return lbClientName; }
		public function get ClientName():String { return lbClientName.text; }
		public function set ClientName(value:String):void { lbClientName.text = value; }</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="itemConverter" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate />
      <ElementTemplate>
	/**
	 * once ‘JSON.decode(String):Object’ has been called, we
	 * need a IList/ICollection Flex-DataProvider complient object.
	 * this function is designed to convert a JSON response to such
	 * a format that can be used in the FLEX application.
	 * 
	 * the input ‘obj:Object’ contains:
	 * 
	 * 		cols:
	 * 			an string array of the column names contained in the following data array.
	 * 		data:
	 * 			an array of Data, ordered as specified by the cols spec.
	 * 		action:
	 * 			the action that triggered the readout
	 * 		nresults:
	 * 			the number of records returned.
	 * 
	**/
	public function Convert$(TableNameCClean)(obj:Object):ArrayList
	{
		var cols:ArrayList = new ArrayList();
		// build a fresh data array.
		for (var y:int = 0; y &lt; obj.data.length; y++)
		{
			cols.addItem(new ClientIdentity(obj.data[y]));
		}
		return cols;
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="flex_class_init" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate>
			$(FriendlyName) = value[$(FieldIndex)];</ItemsTemplate>
      <ElementTemplate>		public function $(TableCleanNameC)Model(value:Object=null):void
		{
			if (value == null) return;
			$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="jsonColsComplex" Group="mvc">
      <ItemsTemplate>
				new ColumnInfo($(TableCleanNameC)Model.col_$(FriendlyName))</ItemsTemplate>
      <ElementTemplate>
		#region Json (Complex)
		static public string Json$(TableCleanNameC)(Controller controller, SqlDbA data)
		{
			string _$(PKFriendlyName) = controller.Request.Params["$(PK)"];
			return Json$(TableCleanNameC)(controller,data,
				string.IsNullOrEmpty(_$(PKFriendlyName)) ? "":string.Format("WHERE [$(PK)] = {0}",_$(PKFriendlyName)),
				"".QOrderBy($(TableCleanNameC)Model.col_$(PKFriendlyName).QBrace(),true),
				ModelColumns);
		}
		static public string Json$(TableCleanNameC)(Controller controller, SqlDbA data, string searchFor, string sortOptions)
		{
			return Json$(TableCleanNameC)( controller, data, searchFor, sortOptions, ModelColumns );
		}
		static public string Json$(TableCleanNameC)(Controller controller, SqlDbA data, string searchFor, string sortOptions, params ColumnInfo[] cols)
		{
			string _$(PKFriendlyName) = controller.Request.Params["$(PKFriendlyName)"] == string.Empty ? (string)null : controller.Request.Params["$(PKFriendlyName)"]; //+"%"
			// return controller.QuickMatch(
			// data, ____________ACTION________________,
			return controller.QuickMatch(
				data, $(TableCleanNameC)Model.table_name, actionName,
				searchFor, sortOptions,
				0,int.MaxValue,
				string.IsNullOrEmpty(_$(PKFriendlyName)), // get the top record if none was specified
				false, cols); // DISTINCT, columns
				
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="basicModel" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate />
      <ElementTemplate>package mvc
{
	import flash.net.URLVariables;
	/**
	 * While I could have easily used an interface to provide this **EMPTY** data type,
	 * I figured I'd simply use a empty class object.
	 * &lt;hr/&gt;
	 * The reason that this class was written was to constrict any JSON-Enabled Control
	 * such as the ComboBoxJSON and DropDownBoxJSON controls provided.
	 */
	[Bindable]
	public class BasicModel extends Object
	{
		public var IsDirty:Boolean = false;
		/**
		 * this class is designed to be ignored!
		 * @param	value the value is going to be any prototype object provided by
		 * a JSON.deserialize method.  we expect a string array named ‘cols’ and a data
		 * array that uses the col-spec.
		 */
		public function BasicModel(value:Object = null):void
		{
		}
		/**
		 * Creates a URLVariables object and prototypes it per
		 * Model.
		 * @param	action
		 * @return
		 */
		public function setParams(action:String):URLVariables
		{
			var uv:URLVariables = new URLVariables();
			uv.action = action;
			return uv;
		}
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="jsonColsSimple" Group="mvc">
      <ItemsTemplate>
				new ColumnInfo($(TableCleanNameC)Model.col_$(FriendlyName))</ItemsTemplate>
      <ElementTemplate>		#region Json (simple calls)
		static public string Json$(TableCleanNameC)Simple(Controller controller, SqlDbA data)
		{
			return Json$(TableCleanNameC)Simple(controller,data,
				string.Empty, // search, sort…
				"".QOrderBy($(TableCleanNameC)Model.col_$(PKFriendlyName).QBrace(),true), // provide sorting
				ModelColumns);
		}
		static public string Json$(TableCleanNameC)Simple(Controller controller, string searchFor, string sortOptions, SqlDbA data)
		{
			return Json$(TableCleanNameC)Simple( controller, data, searchFor, sortOptions, ModelColumns);
		}
		static public string Json$(TableCleanNameC)Simple(Controller controller, SqlDbA data, string searchFor, string sortOpts, params ColumnInfo[] cols)
		{
			return controller.QuickMatch(
				data, $(TableCleanNameC)Model.table_name, actionName,
				// string.Empty, // 
				searchFor, sortOpts,
				0,int.MaxValue,
				false, // get the top record if none was specified
				false, // DISTINCT;
				cols);
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="modelColumns" Group="mvc">
      <ItemsTemplate>
				new ColumnInfo($(TableCleanNameC)Model.col_$(FriendlyName))</ItemsTemplate>
      <ElementTemplate>		static public ColumnInfo[] ModelColumns {
			get {
				return new ColumnInfo[]{
				new ColumnInfo($(TableCleanNameC)Model.col_$(PKFriendlyName)){IsId=true},$(FieldValuesNK,Cdf) };
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="post functions" Group="mvc">
      <ItemsTemplate>
			if (!string.IsNullOrEmpty(controller.Request["$(DataName)"]) this.$(FriendlyName) = controller.Request["$(DataName)"];</ItemsTemplate>
      <ElementTemplate>
		public void Save$(TableCleanNameC)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="model setters" Group="mvc">
      <ItemsTemplate>
			case col_$(FriendlyName): $(FriendlyNameC) = $(DataTypeNative).Parse(value); break;</ItemsTemplate>
      <ElementTemplate>
		public void StringValue(string key, string value)
		{
			
		}

		public void SetValue(string key, double value)
		{
			switch (key)
			{$(FieldValuesNK)
			default: ; break;
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="flex_url_params" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate>
			obj.$(FriendlyName) = $(FriendlyName);</ItemsTemplate>
      <ElementTemplate>
		override public function setParams(actionString:String):URLVariables
		{
			var obj:URLVariables = super.setParams(actionString);
			$(FieldValues)
			return obj;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="ns oldData" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>	// template alias: “tplClassDrivers”, template group: (System.Data.SqlServer)
	// $(TableTemplate:pntables)
	// Generated: $(DateTime)
	// $(Var:ClassName,Memos)
	public class Prime_Data : SqlDbA
	{
		// this needs to be 
		const string default_dataset_name = "data";

$(TableTemplate:InnerClassSql,$(TableTemplate:pntables))

		DataSet ds = new DataSet(default_dataset_name);
		public DataSet GlobalData { get { return ds; } set { ds = value; } }

		#region Table/View
$(TableTemplate:Table/View,$(TableTemplate:pntables))
		#endregion

		#region Query Constants
$(TableTemplate:query:tsqlConstants,$(TableTemplate:pntables))
		#endregion
$(TableTemplate:prams,$(TableTemplate:pntables))

$(TableTemplate:csQueries,$(TableTemplate:pntables))
$(TableTemplate:qSqlLastIntro,$(TableTemplate:pntables))
$(TableTemplate:qSqlLast)
$(TableTemplate:nativeColumns,$(TableTemplate:pntables))

		public PrimeData()
		{
	#if VAIO
			this.dsource = @"VAIO\SQLEXPRESS";
	#elif PRIME
			this.dsource = @"PRIME7\SQLEXPRESS";
	#endif
			this.dcatalog = @"prime";
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc BasicModel" Group="www.flex" SyntaxLanguage="as3">
      <ItemsTemplate />
      <ElementTemplate>package mvc
{
	import flash.net.URLVariables;
	/**
	 * While I could have easily used an interface to provide this **EMPTY** data type,
	 * I figured I'd simply use a empty class object.
	 * &lt;hr/&gt;
	 * The reason that this class was written was to constrict any JSON-Enabled Control
	 * such as the ComboBoxJSON and DropDownBoxJSON controls provided.
	 */
	[Bindable]
	public class BasicModel extends Object
	{
		public var IsDirty:Boolean = false;
		/**
		 * this class is designed to be ignored!
		 * @param	value the value is going to be any prototype object provided by
		 * a JSON.deserialize method.  we expect a string array named ‘cols’ and a data
		 * array that uses the col-spec.
		 */
		public function BasicModel(value:Object = null):void
		{
		}
		public function setParams(action:String):URLVariables
		{
			var uv:URLVariables = new URLVariables();
			uv.action = action;
			return uv;
		}
	}
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="PodItem" Group="www.flex.prime">
      <ItemsTemplate />
      <ElementTemplate />
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="wform" Group="www.forms">
      <ItemsTemplate>
	&lt;input type="$(FormType)"&gt;</ItemsTemplate>
      <ElementTemplate>&lt;form action="" method=""&gt;$(FieldValues)
&lt;/form&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="PX" Group="www.forms">
      <ItemsTemplate />
      <ElementTemplate>$(TableName)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="helper" Group="mvc.helpers">
      <ItemsTemplate>
				.DataReplace("%$(DataName)%",row,"$(DataName)")</ItemsTemplate>
      <ElementTemplate>//			string phone = row["phone"]==DBNull.Value ? "" : (string)row["phone"];
//			string phoneExt = row["phone-ext"]==DBNull.Value ? "" : string.Format("Ext: {0}",row["phone-ext"]);
//			if (!string.IsNullOrEmpty(phone)) phone = phone.GetPhoneD();
//				.Replace("%phone%",phone)
//				.Replace("%phone-ext%",phoneExt)
			return
				template$(FieldValues)
				;
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc Root" Group="mvc">
      <ItemsTemplate />
      <ElementTemplate>
	public interface IMvcModel
	{
		string GetSqlTableField(string fieldName);
		string action { get; set; }
		string TableName { get; }
		string DatabaseName { get; }
	}
	abstract public class RootModel&lt;T&gt; : RootModel
	{
		
	}
	/// &lt;summary&gt;an expected action (custom attributes would be nice)&lt;/summary&gt;
	public class RootModel : IMvcModel
	{
		virtual public ColumnInfo[] Columns { get { throw new NotImplementedException(); } }
		string _action;
		/// &lt;summary&gt;
		/// The table action would simply be our chosen common element
		/// that would be used from a HTML-FORM.  Again this would particularly
		/// be in regard to a MVC MODEL.
		/// &lt;/summary&gt;
		public string action {
			get { return _action; }
			set { _action = value; }
		}
	
		/// &lt;summary&gt;
		/// The table name becomes particularly helpful when working from
		/// the perspective of another table where we might call on the
		/// GetSqlTableField(string) funciton to get the field name with
		/// respect to the Table that it's in.
		/// &lt;/summary&gt;
		public virtual string TableName {
			get {
				throw new NotImplementedException();
			}
		}
	
		/// &lt;summary&gt;
		/// The database name shouldn't be necessary because of our using a
		/// particular Database Schema setting, but it's here.
		/// &lt;/summary&gt;
		public virtual string DatabaseName {
			get { return "prime"; }
		}
	
		/// &lt;summary&gt;
		/// note that this template is specific to SqlServer.
		/// &lt;para&gt;with respect to usage from another table.&lt;/para&gt;
		/// &lt;para&gt;the resulting field would include the table name in braces&lt;/para&gt;
		///	&lt;/summary&gt;
		public string GetSqlTableField(string fieldName)
		{
			return string.Format("[{0}].[{1}]", TableName, fieldName);
		}

		public void SetParam(string key, Double value)
		{

		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc namespace ace" Group="!CHECK! mvc">
      <ItemsTemplate />
      <ElementTemplate>// $(Date) $(Time)
// tDriver,customerContacts,order,voucher,rateFlat,rateFlatType,transports,driver_map,viewDriverTransports
using System;
using System.ComponentModel;
using System.Web.Mvc;
using System.Cor3.Mvc;
using System.Cor3.Data;
using System.Cor3.Data.Engine;
using System.Data;

/// &lt;summary&gt;
/// • 110607 Made changes to ClassModel as to inherit a particular RootModel class.
/// &lt;/summary&gt;
namespace mvcx.Models {

$(TableTemplate:mvc Root)
$(TableTemplate:mvc class,tautonumber,tCustomerMaster,tDrivers,tOrders)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="setValues" Group="mvc">
      <ItemsTemplate>
				case "$(DataName)": $(FriendlyNameC) = ($(DataTypeNullable)) Value; break;</ItemsTemplate>
      <ElementTemplate>
		public void SetValue(string Key, object Value)
		{
			switch (Key)
			{$(FieldValues)
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="model.QueryParams1" Group="mvc">
      <ItemsTemplate>
			cmd.Parameters.Add(new SqlParameter("@$(dataname)",string.IsNullOrEmpty(model.$(FriendlyNameC))?DBNull.Value:(object)model.$(FriendlyNameC)));</ItemsTemplate>
      <ElementTemplate>
		/**
		 * Generated by a tool $(DateTime)
		 * ------------------------------------------------------
		 * A good idea would be to implement Templates such as
		 * those configured in SQLite for the MVC web-application.
		 */

		// template: mvc,model.queryparams1		
		#region $(TableCleanNameC) Query
		const string Insert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		const string Update_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		#endregion
		
		// template: mvc,model.queryparams1
		/// &lt;summary&gt;
		/// usePrimary hasn't been implemented, you would have to manually edit this.
		/// &lt;/summary&gt;
		static public void Parameterize(MILEAGEModel model, $(CommandT) cmd, bool usePrimary)
		{$(FieldValues)
		}
		
		// template: mvc,model.queryparams1
		/// &lt;summary&gt;
		/// Used to update a given entry.
		/// &lt;para&gt;Now we just need an insert method.&lt;/para&gt;
		/// &lt;/summary&gt;
		public ActionResult $(TableCleanNameC)EditorResponse($(TableCleanNameC)Model model)
		{
			if (!model.$(PrimaryKeyCleanC).HasValue)
			{
				ViewData["data"] = "No record was requested for updating!";
				return View(model);
			}
			ViewData["data"] = "Updating Record…";
			PrimeData pd = new PrimeData();
			using ($(ConnectionT) c = pd.Connection)
			{
				using ($(AdapterT) a = new $(AdapterT)("",c))
				{
					SqlCommand Update = a.UpdateCommand = new $(CommandT)();
					Update.Connection = c;
					Update.CommandText = Update_$(TableCleanNameC);
					Parameterize(model,Update);
					c.Open();
					try{
						Update.ExecuteNonQuery();
					} catch (Exception error) {
						ViewData["data"] += "error".HtmlH1()+"&lt;p&gt;"+error.ToString()+"&lt;/p&gt;";
						ViewData["data"] += "cmd".HtmlH1()+Update.CommandText.HtmlParagraph();
					}
					c.Close();
				}
			}
			return View(model);
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="getValue" Group="mvc">
      <ItemsTemplate>
				case "$(DataName)": return $(FriendlyNameC);</ItemsTemplate>
      <ElementTemplate>
		public object GetKeyValue(string key)
		{
			switch (key)
			{$(FieldValues)
				default: return null;
			}
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="Query.Params2" Group="mvc">
      <ItemsTemplate>
					Update.Parameters.Add(new SqlParameter("@$(dataname)",GetNObject(model.$(FriendlyNameC))));</ItemsTemplate>
      <ElementTemplate>		#region $(TableCleanNameC) Query Constants
		const string Insert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		const string Update_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		public ActionResult $(TableCleanNameC)EditorResponse($(TableCleanNameC)Model model)
		{
			//Update_CustomerContacts
			if (!model.$(PrimaryKeyCleanC).HasValue)
			{
				ViewData["data"] = "No record was requested for updating!";
				return View(model);
			}
			ViewData["data"] = "Updating Record…";
			PrimeData pd = new PrimeData();
			using (SqlConnection c = pd.Connection)
			{
				using (SqlDataAdapter a = new SqlDataAdapter("",c))
				{
					SqlCommand Update = a.UpdateCommand = new SqlCommand();
					Update.Connection = c;
					Update.CommandText = Update_CustomerContacts;$(FieldValues)
					c.Open();
					try{
						Update.ExecuteNonQuery();
					} catch (Exception error) {
						ViewData["data"] += "error".HtmlH1()+"&lt;p&gt;"+error.ToString()+"&lt;/p&gt;";
						//ViewData["data"] += model.RateCube.ToString().HtmlH1().DQuote();
						ViewData["data"] += "cmd".HtmlH1()+Update.CommandText.HtmlParagraph();
					}
					c.Close();
				}
			}
			return View(model);
		}
		#endregion</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="json_script_data" Group="mvc.json" Tags="js" SyntaxLanguage="Javascript">
      <ItemsTemplate>
				$(FriendlyNameC): $.prime.checkForNull($("#$(FriendlyNameC)").val())</ItemsTemplate>
      <ElementTemplate>
		// this method was externalized (from cclient)
		// so that it could be called separately to refresh
		// the entry if/when necessary.
		var loadRecord = function(record)
		{
			$.post(
				'/directory/showclient',
				{ action:'cupdate', Id: record},
				function(data)
				{
					$('#mastersection').html(data);
					updatechange();
					jQuery.noFormat();
				},
				'html'
			);
		}
		var cchange = function(){
			loadRecord($(this).val());
		}
		var checkForNull = function(value)
		{
			if (String(value)=='') return undefined;
			return value;
		}
		var ajaxupdate = function(){
			var submission = {$(FieldValues,Cdf)
			};
			var recordId = submission.Id;
 			if (confirm("Are you sure?"))
 			{
 				$.post(
					'/directory/clienteditorresponse',
					submission,
					function(data){
						$('#output').html(data);
						//$('#editor').html(null);
						$.ScrollTo('#top'); },
					'html'
					);
 			}
		};
		var updatechange = function()
		{
			$('select#scli').unbind( 'change', cchange  );
			$('select#scli').bind( 'change', cchange  );
			//
			$('input#ajaxsubmit').unbind( 'click', ajaxupdate );
			$('input#ajaxsubmit').bind( 'click', ajaxupdate);
		}

		// this goes in the document.ready or ajax-content update
		$('input#ajaxsubmitbutton').unbind( 'click', cclick );
		$('input#ajaxsubmitbutton').bind( 'click', cclick);
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="IdentityCurls" Group="tsql">
      <ItemsTemplate>
	{$(CleanName)}</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="primeoldertables" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="pntables" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>Common_Stops,Contacts,Customers,Doubles_Details,Doubles_Index,Drivers,Employees,Mileage,News,Notes,Orders,Pickups,PODs,Quotes,Sales_Report,Standard_Rates,Stop_Per_Type,Truck_Types,Quotes</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="newTables" Group="!CHECKME!">
      <ItemsTemplate />
      <ElementTemplate>tDriver,customerContacts,order,voucher,rateFlat,rateFlatType,transports,driver_map,viewDriverTransports,Common_Stops,Contacts,Customers,Employees,Pickups,Standard_Rates,Stop_Per_Type,Truck_Types,Quotes</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="newhelper" Group="mvc.helpers">
      <ItemsTemplate>
				.DataReplace("{$(DataName)}",row,"$(DataName)")</ItemsTemplate>
      <ElementTemplate>//			string phone = row["phone"]==DBNull.Value ? "" : (string)row["phone"];
//			string phoneExt = row["phone-ext"]==DBNull.Value ? "" : string.Format("Ext: {0}",row["phone-ext"]);
//			if (!string.IsNullOrEmpty(phone)) phone = phone.GetPhoneD();
//				.Replace("%phone%",phone)
//				.Replace("%phone-ext%",phoneExt)
			return
				template$(FieldValues)
				;
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="curl" Group="mvc.helpers">
      <ItemsTemplate>
{$(DataName)}</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="perc" Group="mvc.helpers">
      <ItemsTemplate>
%$(DataName)%</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="brac" Group="mvc.helpers">
      <ItemsTemplate>
[$(DataName)]</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="setup.nsi" Group="Nsis" Tags="asfile" SyntaxLanguage="NSI">
      <ItemsTemplate />
      <ElementTemplate>; Script generated by the HM NIS Edit Script Wizard.

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "[appname]"

; Binary File Title
!define V_MA "0.1.0.3"
!define V_MI "2012.03.11"
!define V_RV "0240"
!define V_NO "${V_MA}-b${V_RV}-${V_MI}"
!define BTTL "${PRODUCT_NAME}-${V_NO}"
!define BTTS "${PRODUCT_NAME}-b${V_RV}"

!define PRODUCT_VERSION "${V_NO}"
!define PRODUCT_PUBLISHER "tfwroble@gmail.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\[appname].exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define PRODUCT_STARTMENU_REGVAL "NSIS:StartMenuDir"


; ————————————————————————————————————————

!include "XPUI.nsh"
; MUI 1.67 compatible ------
;!include "MUI.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "[pathtoappbin]\[appname]\readme.rtf"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Start menu page
var ICONS_GROUP
!define MUI_STARTMENUPAGE_NODISABLE
!define MUI_STARTMENUPAGE_DEFAULTFOLDER "WebUtils"
!define MUI_STARTMENUPAGE_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "${PRODUCT_STARTMENU_REGVAL}"
!insertmacro MUI_PAGE_STARTMENU Application $ICONS_GROUP

; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\[appname].exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
; OutFile ".\bin\WebUtils-0.1.${date:yyyy.MMdd}.Setup.exe"
OutFile ".\bin\${BTTL}-Setup.exe"
InstallDir "$PROGRAMFILES\${BTTS}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

$(TableTemplate:setup.nsi-sec)

Section -AdditionalIcons
  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk" "$INSTDIR\uninst.exe"
  !insertmacro MUI_STARTMENU_WRITE_END
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\[appname].exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\[appname].exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
SectionEnd


Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  !insertmacro MUI_STARTMENU_GETFOLDER "Application" $ICONS_GROUP
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\[appname].exe"

  Delete "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk"
  Delete "$DESKTOP\[appname].lnk"
  Delete "$SMPROGRAMS\$ICONS_GROUP\WebUtils.lnk"

  RMDir "$SMPROGRAMS\$ICONS_GROUP"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
SectionEnd</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="(New2)" Group="!Notes">
      <ItemsTemplate />
      <ElementTemplate />
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="setup.nsi-sec" Group="Nsis">
      <ItemsTemplate />
      <ElementTemplate>Section "WebTools Application" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite try
$(TableTemplate:setup.nsi-sec-files,$(TableName))
;  File "[path]"

; Shortcuts
  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application
  CreateDirectory "$SMPROGRAMS\$ICONS_GROUP"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\[appname].lnk" "$INSTDIR\[appname].exe"
  CreateShortCut "$DESKTOP\WebUtils.lnk" "$INSTDIR\[appname].exe"
  !insertmacro MUI_STARTMENU_WRITE_END
SectionEnd
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="setup.nsi-sec-files" Group="Nsis" Tags="files">
      <ItemsTemplate>
  File "$(FileName)"</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="struct" Group="mvc">
      <ItemsTemplate>
	public $(Native) $(FriendlyNameC);</ItemsTemplate>
      <ElementTemplate>
public struct $(TableNameCClean)
{$(FieldValues)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="structs" Group="!CHECK! mvc">
      <ItemsTemplate />
      <ElementTemplate>using System;

namespace prime.structs
{
	// this is Prime.Ace: tOrders, tDriver, tCustomerMaster, tautonumber
	$(TableTemplateF:struct,tOrders,tDriver,tCustomerMaster,tautonumber)
	// this is Prime: Standard_Rates,
	$(TableTemplateNo:struct,Standard_Rates,Stop_Per_Type,Truck_Types,Quotes,transports,rateFlat,rateFlatType)
}

</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.Structure" Group="prime.struct">
      <ItemsTemplate>
			cmd.Parameters.AddWithValue("@$(DataName)", this.$(FriendlyName));</ItemsTemplate>
      <ElementTemplate>
		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public $(CommandT) Parameterize($(CommandT) cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@$(PKDataName)", this.$(PKFriendlyName));$(FieldValuesNK)
			return cmd;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.#ctor1" Group="prime.struct">
      <ItemsTemplate>
			if (row["$(DataName)"]!=DBNull.Value) this.$(FriendlyName) = row["$(DataName)"] as $(DataTypeNullable);</ItemsTemplate>
      <ElementTemplate>
		public $(TableNameC)(DataRowView row)
		{$(FieldValues)
		}
		public DataRowView ToRow(DataRowView row)
		{$(FieldValues)
			return row;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.template" Group="prime.struct">
      <ItemsTemplate />
      <ElementTemplate>
	// Generated by a tool : $(DateTime)
	// ------------------------
	public partial class $(TableCleanNameC)
	{
		static public implicit operator $(TableCleanNameC)(DataRowView row) { return $(TableCleanNameC).FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
$(TableTemplate:prime.struct.strUtil-class,$(TableName))
$(TableTemplate:prime.struct.strUtil,$(TableName))
		#region Queries
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Insert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Update_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Select_$(TableCleanNameC) = @"Select * From $(TableName);";
		internal const string Select_$(TableCleanNameC) = @"Delete From $(TableName) where [$(PrimaryKey)] = {0};";
		#endregion
		#region Properties
		public $(PKNativeNullType) $(PKFriendlyName) { get;set; }$(FieldValuesNK)
		#endregion
		#region Constructors
$(TableTemplate:prime.struct.#ctor1,$(TableName))
$(TableTemplate:prime.struct.#ctor2,$(TableName))
		#endregion
		#region Utils
$(TableTemplate:prime.struct.updateMethod,$(TableName))
$(TableTemplate:prime.struct.params,$(TableName))
		#endregion
		#region template['?']['newTable']
$(TableTemplate:newTable,$(TableName))
		#endregion
		#region template['prime.struct']['struct rowfrom']
$(TableTemplate:struct rowfrom,$(TableName))
		#endregion
	}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.params-pk" Group="trash">
      <ItemsTemplate>
			if (usePrimary)
				this.$(FriendlyName)	= row["$(DataName)"] as $(DataTypeNullable);</ItemsTemplate>
      <ElementTemplate>$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.params" Group="prime.struct">
      <ItemsTemplate>
			cmd.Parameters.AddWithValue("@$(CleanName)", this.$(FriendlyName));</ItemsTemplate>
      <ElementTemplate>
		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public $(CommandT) Parameterize($(CommandT) cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@$(PKDataName)", this.$(PKFriendlyName));$(FieldValuesNK)
			return cmd;
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.#ctor2" Group="prime.struct">
      <ItemsTemplate>
			this.$(FriendlyName) = value.$(FriendlyName);</ItemsTemplate>
      <ElementTemplate>
		public $(TableNameC)(){}
		/// &lt;summary&gt;
		/// Used for cloning operations.
		/// &lt;para&gt;Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.&lt;/para&gt;
		/// &lt;/summary&gt;
		public $(TableNameC)($(TableNameC) value)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.updateMethod" Group="prime.struct">
      <ItemsTemplate>
			this.$(FriendlyName) = value.$(FriendlyName);</ItemsTemplate>
      <ElementTemplate>
		/// &lt;summary&gt;
		/// Used for cloning operations.
		/// &lt;para&gt;Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.&lt;/para&gt;
		/// &lt;/summary&gt;
		public void SetFields($(TableNameC) value)
		{$(FieldValuesNK)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="mvc simple-class" Group="mvc">
      <ItemsTemplate>
		/// &lt;summary&gt;driverno Field: Name="$(DataName)" Type="$(DataTypeNullable)", $(smax) &lt;/summary&gt;
		[DisplayName(@"$(Description)")] public $(DataTypeNullable) $(FriendlyNameC) {
			get { return _$(FriendlyName); } set { _$(FriendlyName) = value; }
		} $(DataTypeNullable) _$(FriendlyName) = default($(Native));
</ItemsTemplate>
      <ElementTemplate>	#region $(TableCleanNameC)Model

	/// &lt;summay&gt;$(TableCleanNameC)Model, PrimaryKey=‘$(PrimaryKey)’&lt;/summary&gt;
	/// &lt;remarks&gt;&lt;/remarks&gt;
	public class $(TableCleanNameC)Model : RootModel {

		public override string TableName { get { return table_name; } }

		#region static/const
$(TableTemplate:modelColumns,$(TableName))
$(TableTemplate:mvc type,$(TableName))
$(TableTemplate:mvc const,$(TableName))
$(TableTemplate:mvc cols,$(TableName))
$(TableTemplate:mvc rowfrom,$(TableName))
$(TableTemplate:mvc rowto,$(TableName))
		#endregion

		#region Properties$(FieldValues)
		#endregion
	
$(TableTemplate:jsonColsSimple,$(TableName))
$(TableTemplate:jsonColsComplex,$(TableName))
$(TableTemplate:getValue,$(TableName))
$(TableTemplate:setValues,$(TableName))
	
	}
	#endregion
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="model.QueryParams3" Group="mvc">
      <ItemsTemplate>
			//cmd.Parameters.Add(new SqlParameter("@$(dataname)",GetNObject(model.$(FriendlyNameC))));
			cmd.Parameters.Add(new SqlParameter("@$(dataname)",string.IsNullOrEmpty(model.$(FriendlyNameC))?DBNull.Value:(object)model.$(FriendlyNameC)));</ItemsTemplate>
      <ElementTemplate>
		/**
		 * Generated by a tool $(DateTime)
		 * ------------------------------------------------------
		 * A good idea would be to implement Templates such as
		 * those configured in SQLite for the MVC web-application.
		 * ------------------------------------------------------
		 * This template is based on model.queryparams1 template.
		 */

		// tpl: mvc,model.queryparams3
		#region $(TableCleanNameC) Constants: Query Insert, Update
		const string QueryInsert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		const string QueryUpdate_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		/// &lt;summary&gt;
		/// Implementation NOTE:
		/// This query expects you to assign the PRIMARY KEY parameter to @xid always.
		/// You can handle this via parameterization, or through a string replacement
		/// to the query it self.
		/// &lt;/summary&gt;
		const string QueryDelete_$(TableCleanNameC) = @"$(TableTemplate:query:Delete,$(TableName))";
		#endregion
		#region $(TableCleanNameC) Constants: General
		const string msg_$(TableCleanNameC)_no_record = "No record was requested for updating!";
		const string msg_$(TableCleanNameC)_update_progress = "Updating $(TableCleanNameC) Record…";
		const string msg_$(TableCleanNameC)_errr_fmt = "Error: ".HtmlH1()+"&lt;p&gt;{0}&lt;/p&gt;";
		#endregion
		
		// tpl: mvc,model.queryparams3
		/// &lt;summary&gt;
		/// usePrimary hasn't been implemented, you would have to manually edit this.
		/// &lt;para&gt;
		/// You might notice a Obsoletion status on the Command.Add(…) method.
		/// Each data engine such as OLE/ADO, SqlServer, MySql and SQLite will
		/// most-likely have provided an overload to the Add method which performs
		/// as the suggested AddWithValue method.
		/// &lt;/para&gt;
		/// &lt;/summary&gt;
		static public void Parameterize(MILEAGEModel model, $(CommandT) cmd, bool usePrimary)
		{$(FieldValues)
		}
		
		// tpl: mvc,model.queryparams3
		/// &lt;summary&gt;
		/// Used to update a given entry.
		/// &lt;para&gt;Now we just need an insert method.&lt;/para&gt;
		/// &lt;/summary&gt;
		public ActionResult $(TableCleanNameC)EditorResponse($(TableCleanNameC)Model model)
		{
			if (!model.$(PrimaryKeyCleanC).HasValue)
			{
				ViewData["data"] = msg_$(TableCleanNameC)_no_record;
				return View(model);
			}
			ViewData["data"] = msg_$(TableCleanNameC)_update_progress;
			PrimeData pd = new PrimeData();
			using ($(ConnectionT) c = pd.Connection)
			{
				using ($(AdapterT) a = new $(AdapterT)("",c))
				{
					SqlCommand Update = a.UpdateCommand = new $(CommandT)();
					Update.Connection = c;
					Update.CommandText = QueryUpdate_$(TableCleanNameC);
					Parameterize(model,Update,true);
					c.Open();
					try{ Update.ExecuteNonQuery(); } catch (Exception error) {
						ViewData["data"] += string.Format(msg_$(TableCleanNameC)_errr_fmt,error.ToString().HtmlParagraph());
						ViewData["data"] += "cmd".HtmlH1()+Update.CommandText.HtmlParagraph();
					}
					c.Close();
				}
			}
			return View(model);
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.#ctor3" Group="prime.struct">
      <ItemsTemplate>
			this.$(FriendlyName) = value.$(FriendlyName);</ItemsTemplate>
      <ElementTemplate>
		/// &lt;summary&gt;
		/// Used for cloning operations.
		/// &lt;para&gt;Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.&lt;/para&gt;
		/// &lt;/summary&gt;
		public $(TableNameC)($(TableNameC) value)
		{
			this.$(PKFriendlyName) = value.$(PKFriendlyName);
			this.SetFields(value);
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="DotNet.Resource.Template1" Group="DotNet.Resource">
      <ItemsTemplate>
  &lt;data name="$(DataName)" xml:space="preserve"&gt;
    &lt;value&gt;Demo Value&lt;/value&gt;
  &lt;/data&gt;</ItemsTemplate>
      <ElementTemplate>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
  &lt;!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers &amp; schema ...
    &lt;resheader name="resmimetype"&gt;text/microsoft-resx&lt;/resheader&gt;
    &lt;resheader name="version"&gt;2.0&lt;/resheader&gt;
    &lt;resheader name="reader"&gt;System.Resources.ResXResourceReader, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;resheader name="writer"&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;data name="Name1"&gt;&lt;value&gt;this is my long string&lt;/value&gt;&lt;comment&gt;this is a comment&lt;/comment&gt;&lt;/data&gt;
    &lt;data name="Color1" type="System.Drawing.Color, System.Drawing"&gt;Blue&lt;/data&gt;
    &lt;data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64"&gt;
        &lt;value&gt;[base64 mime encoded serialized .NET Framework object]&lt;/value&gt;
    &lt;/data&gt;
    &lt;data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64"&gt;
        &lt;value&gt;[base64 mime encoded string representing a byte array form of the .NET Framework object]&lt;/value&gt;
        &lt;comment&gt;This is a comment&lt;/comment&gt;
    &lt;/data&gt;
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    --&gt;
  &lt;xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
    &lt;xsd:import namespace="http://www.w3.org/XML/1998/namespace" /&gt;
    &lt;xsd:element name="root" msdata:IsDataSet="true"&gt;
      &lt;xsd:complexType&gt;
        &lt;xsd:choice maxOccurs="unbounded"&gt;
          &lt;xsd:element name="metadata"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" use="required" type="xsd:string" /&gt;
              &lt;xsd:attribute name="type" type="xsd:string" /&gt;
              &lt;xsd:attribute name="mimetype" type="xsd:string" /&gt;
              &lt;xsd:attribute ref="xml:space" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="assembly"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:attribute name="alias" type="xsd:string" /&gt;
              &lt;xsd:attribute name="name" type="xsd:string" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="data"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
                &lt;xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" /&gt;
              &lt;xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" /&gt;
              &lt;xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" /&gt;
              &lt;xsd:attribute ref="xml:space" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="resheader"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" type="xsd:string" use="required" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
        &lt;/xsd:choice&gt;
      &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;
  &lt;/xsd:schema&gt;
  &lt;resheader name="resmimetype"&gt;
    &lt;value&gt;text/microsoft-resx&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="version"&gt;
    &lt;value&gt;2.0&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="reader"&gt;
    &lt;value&gt;System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="writer"&gt;
    &lt;value&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
  &lt;/resheader&gt;$(FieldValuesNK)
&lt;/root&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.Class" Group="prime.struct">
      <ItemsTemplate>
		public $(DataTypeNullable) $(FriendlyName) { get;set; }</ItemsTemplate>
      <ElementTemplate>
	// Generated by a tool : $(DateTime)
	// ------------------------
	public partial class $(TableCleanNameC)
	{
		static public implicit operator $(TableCleanNameC)(DataRowView row) { return $(TableCleanNameC).FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
$(TableTemplate:prime.struct.strUtil-class,$(TableName))
$(TableTemplate:prime.struct.strUtil,$(TableName))
		#region Queries
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Insert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Update_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Select_$(TableCleanNameC) = @"Select * From $(TableName);";
		internal const string Delete_$(TableCleanNameC) = @"Delete From $(TableName) where [$(PrimaryKey)] = {0};";
		#endregion
		#region Properties
		public $(PKNativeNullType) $(PKFriendlyName) { get;set; }$(FieldValuesNK)
		#endregion
		#region Constructors
$(TableTemplate:prime.struct.#ctor1,$(TableName))
$(TableTemplate:prime.struct.#ctor2,$(TableName))
		#endregion
		#region Utils
$(TableTemplate:prime.struct.updateMethod,$(TableName))
$(TableTemplate:prime.struct.params,$(TableName))
		#endregion
		#region template['?']['newTable']
$(TableTemplate:newTable,$(TableName))
		#endregion
		#region template['prime.struct']['struct rowfrom']
$(TableTemplate:struct rowfrom,$(TableName))
		#endregion
	}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="DotNet.Resource.Template2" Group="DotNet.Resource">
      <ItemsTemplate>
  &lt;data name="$(DataName)" xml:space="preserve"&gt;
    &lt;value&gt;Demo Value&lt;/value&gt;
  &lt;/data&gt;</ItemsTemplate>
      <ElementTemplate>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
  &lt;!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers &amp; schema ...
    &lt;resheader name="resmimetype"&gt;text/microsoft-resx&lt;/resheader&gt;
    &lt;resheader name="version"&gt;2.0&lt;/resheader&gt;
    &lt;resheader name="reader"&gt;System.Resources.ResXResourceReader, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;resheader name="writer"&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;data name="Name1"&gt;&lt;value&gt;this is my long string&lt;/value&gt;&lt;comment&gt;this is a comment&lt;/comment&gt;&lt;/data&gt;
    &lt;data name="Color1" type="System.Drawing.Color, System.Drawing"&gt;Blue&lt;/data&gt;
    &lt;data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64"&gt;
        &lt;value&gt;[base64 mime encoded serialized .NET Framework object]&lt;/value&gt;
    &lt;/data&gt;
    &lt;data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64"&gt;
        &lt;value&gt;[base64 mime encoded string representing a byte array form of the .NET Framework object]&lt;/value&gt;
        &lt;comment&gt;This is a comment&lt;/comment&gt;
    &lt;/data&gt;
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    --&gt;
  &lt;xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
    &lt;xsd:import namespace="http://www.w3.org/XML/1998/namespace" /&gt;
    &lt;xsd:element name="root" msdata:IsDataSet="true"&gt;
      &lt;xsd:complexType&gt;
        &lt;xsd:choice maxOccurs="unbounded"&gt;
          &lt;xsd:element name="metadata"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" use="required" type="xsd:string" /&gt;
              &lt;xsd:attribute name="type" type="xsd:string" /&gt;
              &lt;xsd:attribute name="mimetype" type="xsd:string" /&gt;
              &lt;xsd:attribute ref="xml:space" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="assembly"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:attribute name="alias" type="xsd:string" /&gt;
              &lt;xsd:attribute name="name" type="xsd:string" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="data"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
                &lt;xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" /&gt;
              &lt;xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" /&gt;
              &lt;xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" /&gt;
              &lt;xsd:attribute ref="xml:space" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="resheader"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
              &lt;/xsd:sequence&gt;
              &lt;xsd:attribute name="name" type="xsd:string" use="required" /&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
        &lt;/xsd:choice&gt;
      &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;
  &lt;/xsd:schema&gt;
  &lt;resheader name="resmimetype"&gt;
    &lt;value&gt;text/microsoft-resx&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="version"&gt;
    &lt;value&gt;2.0&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="reader"&gt;
    &lt;value&gt;System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
  &lt;/resheader&gt;
  &lt;resheader name="writer"&gt;
    &lt;value&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
  &lt;/resheader&gt;$(FieldValuesNK)
&lt;/root&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.TestingData" Group="prime.struct">
      <ItemsTemplate />
      <ElementTemplate>
	class DataManagement
	{
		/*
		 * Generated by a tool $(DateTime)
		 * for $(CommandT), $(ConnectionT) $(AdapterT)
		 */
		
		#region Data Adaption
		int Adapt($(AdapterT) A, DataSet D, string tablename)
		{
			return A.Fill(D,tablename);
		}
		
		/// &lt;summary&gt;
		/// this can be used for UPDATE|INSERT|DELETE
		/// &lt;/summary&gt;
		/// &lt;param name="A"&gt;&lt;/param&gt;
		/// &lt;param name="D"&gt;&lt;/param&gt;
		/// &lt;param name="tablename"&gt;&lt;/param&gt;
		/// &lt;returns&gt;Always -1&lt;/returns&gt;
		int AdaptForDelete($(AdapterT) A, DataSet D, string tablename)
		{
			return -1;
		}
		
		// data-adapter
		
		$(AdapterT) RP_Select(DbOp op, string query, $(ConnectionT) connection) { return new $(AdapterT)(){ SelectCommand = new $(CommandT)(query,connection) }; }
		$(AdapterT) RP_INS(DbOp op, string query, $(ConnectionT) connection) { return new $(AdapterT)(){ InsertCommand = new $(CommandT)(query,connection) }; }
		$(AdapterT) RP_UPD(DbOp op, string query, $(ConnectionT) connection) { return new $(AdapterT)(){ UpdateCommand = new $(CommandT)(query,connection) }; }
		$(AdapterT) RP_DEL(DbOp op, string query, $(ConnectionT) connection) { return new $(AdapterT)(){ DeleteCommand = new $(CommandT)(query,connection) }; }
		
		DataRowView UniqueMethod(string table, string qinsert, string qselect, string key, object value)
		{
			DataRowView row = null;
			
			string query_insert = qinsert
				.Replace("@table",table.QBrace())
				.Replace("@key",key.QBrace())
				.Replace("@token",string.Concat("'",value,"'"))
				;
			string query_select = qselect
				.Replace("@table",table.QBrace())
				.Replace("@key",key.QBrace())
				.Replace("@token",string.Concat("'",value,"'"))
				;
			string datafile = string.Empty;
			string datatable = string.Empty;
			using (SQLiteDb db = new SQLiteDb(datafile/*,datatable*/))
			{
				using (DataSet ds = db.Insert(table,query_insert,RP_INS,AdaptForDelete)){}
				using (DataSet ds = db.Select(table,query_insert,RP_INS,AdaptForDelete))
					if ( (ds.Tables[table]!=null) &amp;&amp; (ds.Tables[table].Rows.Count==1) )
						row = ds.Tables[table].DefaultView[0];
			}
			return row;
		}

		#endregion
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.Class#2" Group="prime.struct">
      <ItemsTemplate>
		public $(DataTypeNullable) $(FriendlyName) { get;set; }</ItemsTemplate>
      <ElementTemplate>
	// Generated by a tool : $(DateTime)
	// ------------------------
	public partial class $(TableCleanNameC)
	{
		static public implicit operator $(TableCleanNameC)(DataRowView row) { return $(TableCleanNameC).FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
$(TableTemplate:prime.struct.strUtil-class,$(TableName))
$(TableTemplate:prime.struct.strUtil,$(TableName))
		#region Queries
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Insert_$(TableCleanNameC) = @"$(TableTemplate:query:Insert,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Update_$(TableCleanNameC) = @"$(TableTemplate:updateValues,$(TableName))";
		/// &lt;summary&gt; not that we need it or anything &lt;/summary&gt;
		internal const string Select_$(TableCleanNameC) = @"Select * From $(TableName);";
		#endregion
		#region Properties
		public $(PKNativeNullType) $(PKFriendlyName) { get;set; }$(FieldValuesNK)
		#endregion
		#region Constructors
$(TableTemplate:prime.struct.#ctor1,$(TableName))
$(TableTemplate:prime.struct.#ctor2,$(TableName))
		#region NONONO
		#if NONONO
		$(TableTemplate:prime.struct.#ctor3,$(TableName))
		#endif
		#endregion
		#endregion
		#region Utils
$(TableTemplate:prime.struct.updateMethod,$(TableName))
$(TableTemplate:prime.struct.params,$(TableName))
		#endregion
		#region template['?']['newTable']
$(TableTemplate:newTable,$(TableName))
		#endregion
		#region template['prime.struct']['struct rowfrom']
$(TableTemplate:struct rowfrom,$(TableName))
		#endregion
	}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="struct rowfrom" Group="prime.struct">
      <ItemsTemplate>
			if (row["$(DataName)"]!=DBNull.Value) model.$(FriendlyName) = row["$(DataName)"] as $(DataTypeNullable);</ItemsTemplate>
      <ElementTemplate>
		static public $(TableNameC) FromRowView(DataRowView row)
		{
			$(TableNameC) model = new $(TableNameC)();$(FieldValues)
			return model;
		}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="(New2)" Group="prime.struct">
      <ItemsTemplate>
	&lt;input type="$(FormType)" name="$(FriendlyName)" id="$(FriendlyName)" value="{$(DataName)}" /&gt;</ItemsTemplate>
      <ElementTemplate>		public string StringFor$(TableCleanNameC)$(FieldValues)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="lenzenip.data" Group="!CHECKME! prime.struct">
      <ItemsTemplate />
      <ElementTemplate>
$(TableTemplate:prime.struct.Class#2,CONTACT_TYPES,LIP_CONTACT,LIP_LOCATION,LIP_PHONE,LIP_NOTE,LIP_EMAIL,LIP_MATTER,LIP_WORK_ITEM)
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.strUtil" Group="prime.struct">
      <ItemsTemplate>
				.Replace("{$(DataName)}", string.Format("{0}",row["$(DataName)"]))</ItemsTemplate>
      <ElementTemplate>		static public string StringFor$(TableCleanNameC)(string input, DataRowView row)
		{
			return input$(FieldValues);
		}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="sqlite-data-table-create" Group="prime.struct">
      <ItemsTemplate>
	[$(DataName)] $(DataType)</ItemsTemplate>
      <ElementTemplate>DROP TABLE IF EXISTS [$(TableName)];
CREATE TABLE [$(TableName)] (
	[$(PKDataName)] $(PKDataType) PRIMARY KEY AUTOINCREMENT,$(FieldValuesNK,Cdf)
);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="lenzenxo.form" Group="prime.struct">
      <ItemsTemplate>&lt;input
	type="$(FormType)" title="$(DataName) $(DataType) $(FormType)" name="$(DataName)"
	id="$(DataName)" value="{$(DataName)}" class="form-control" /&gt;</ItemsTemplate>
      <ElementTemplate>&lt;form id="LIP_CONTACT"&gt;$(FieldValues)
&lt;/form&gt;
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="prime.struct.strUtil-class" Group="prime.struct">
      <ItemsTemplate>
				.Replace("{$(DataName)}", string.Format("{0}",m.$(FriendlyName)))</ItemsTemplate>
      <ElementTemplate>		static public string StringFor$(TableCleanNameC)(string input, $(TableCleanNameC) m)
		{
			return input$(FieldValues);
		}
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="create-sql-lenzenip" Group="prime.struct">
      <ItemsTemplate>.</ItemsTemplate>
      <ElementTemplate>
$(TableTemplate:sqlite-data-table-create,CONTACT_TYPES,LIP_CONTACTS,LIP_LOCATION,LIP_NOTE,LIP_EMAIL,LIP_MATTER,LIP_WORK_ITEM)
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="class2.fromController" Group="prime.struct">
      <ItemsTemplate>
			$(FriendlyName) = $(NativeType).Parse(c.Request["$(DataName)"]) ;</ItemsTemplate>
      <ElementTemplate>
		public void TableView(Controller c)
		{$(FieldValues)
		}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="php-mdl" Group="prime.struct">
      <ItemsTemplate />
      <ElementTemplate>&lt;?php
// preclude : FormData
class SQLx1
{
	var $file = "./data.db3";
	var $sqlCreate = '
	DROP TABLE IF EXISTS MINE;
	CREATE TABLE MINE(
		[id] INTEGER PRIMARY KEY AUTOINCREMENT,
		[title] VARCHAR,
		[content] VARCHAR,
		[style] VARCHAR,
		[group] VARCHAR
	);';
	var $sqlInsert = '
	INSERT INTO MINE ([title],[content],[style],[group])
	VALUES(
		":title",
		":content",
		":style",
		":group"
		);
	);';
	var $sqlSelect = 'select * from mine order by [title]';

	public function set_file($fname) { $this-&gt;file = $fname; }

	// see: http://www.php.net/manual/en/language.oop5.decon.php 
	public function __construct($input_file = null)
	{
		if ($input_file != null) $this-&gt;file = $input_file;
	}
	public function insert($f)
	{
		$db = new SQLite3($this-&gt;file);
		try
		{
		//---------------------------------------------------------------
			$stmt = $db-&gt;prepare($this-&gt;sqlInsert);
			$stmt-&gt;bindParam('@title', $f-&gt;title, 		SQLITE3_TEXT);
			$stmt-&gt;bindParam('@content', $f-&gt;content, 	SQLITE3_TEXT);
			$stmt-&gt;bindParam('@group', $f-&gt;group, 		SQLITE3_TEXT);
			$stmt-&gt;bindParam('@style', $f-&gt;style, 		SQLITE3_TEXT);
			$result = $stmt-&gt;execute();
			var_dump($result-&gt;fetchArray());
			$db-&gt;close();
		//---------------------------------------------------------------
		}
		catch (Exception $e)
		{
    		echo 'Caught exception: ',  $e-&gt;getMessage(), "\n";
		}
		return $q;
	}
	public function create()
	{
		try
		{
			$db = new SQLite3($this-&gt;file);
			$db-&gt;exec($this-&gt;sqlCreate);
			$db-&gt;close();
		}
		catch (Exception $e)
		{
    		echo 'Caught exception: ',  $e-&gt;getMessage(), "\n";
		}
	}
	public function select()
	{
		$db = new SQLite3($this-&gt;file);
		$db-&gt;open();
		$results = $db-&gt;query($this-&gt;sqlSelect);
		while ($row = $results-&gt;fetchArray()) {
			echo var_dump($row);
		}
		$db-&gt;close();
	}
}

?&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="sqlutil" Group="prime.struct">
      <ItemsTemplate>[$(DataName)]</ItemsTemplate>
      <ElementTemplate>DROP TABLE IF EXISTS [$(TableName)1];
ALTER TABLE [$(TableName)] RENAME TO [$(TableName)1];
$(TableTemplate:sqlite-data-table-create,$(TableName))
INSERT INTO [$(TableName)] ( $(FieldValuesNK,Cdf) ) SELECT $(FieldValuesNK,Cdf) FROM [$(TableName)1];
DROP TABLE [$(TableName)1];
/*
DROP TABLE [$(TableName)1]; $(DateTime)
*/
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="sqlutil1" Group="prime.struct">
      <ItemsTemplate>[$(DataName)]</ItemsTemplate>
      <ElementTemplate>
ALTER TABLE [$(TableName)] RENAME TO [$(TableName)1];
SELECT * FROM $(TableName)1;
/*
$(TableTemplate:sqlite-data-table-create,$(TableName))
INSERT INTO [$(TableName)] ( $(FieldValuesNK,Cdf) ) SELECT $(FieldValuesNK,Cdf) FROM [$(TableName)1];
DROP TABLE [$(TableName)1];
$(DateTime)
*/
</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="crud-create" Group="php">
      <ItemsTemplate>
			$stmt-&gt;bindValue(':$(FriendlyName)', $f-&gt;$(FriendlyName), SQLITE3_TEXT);</ItemsTemplate>
      <ElementTemplate>
	/**
	 * crud-create
	 * For date creation, we use `date('Y-m-d H:i:s')` within this method
	 * so that our date values are automatically generated...
	 * so within the context of this method ('s template), we need
	 * to modify the crd and mod fields accordingly... EG:
	 * $stmt-&gt;bindValue(':crd', date('Y-m-d H:i:s'), SQLITE3_TEXT);
	 * 
	 * Additionally, we are falling back on some other default values
	 * that are provided to this method's base class.
	 */
	public function insert($f)
	{
		if ($f == null) { echo err("Xan not be null."); return; }
		
		$db = new SQLite3($this-&gt;file);
		//echo err("{$this-&gt;file}","Insert:Loaded");
		
		try
		{
			//---------------------------------------------------------------
			$stmt = $db-&gt;prepare(self::sqlInsert);

			if ($stmt == false) { echo err("error preparing."); return; }
			
$(FieldValues)

			$stmt-&gt;bindValue(':title',      $f-&gt;title,      SQLITE3_TEXT);
			$stmt-&gt;bindValue(':background', $f-&gt;background, SQLITE3_TEXT);
			$stmt-&gt;bindValue(':crd',     	date('Y-m-d H:i:s'), SQLITE3_TEXT);
			$stmt-&gt;bindValue(':mod',     	date('Y-m-d H:i:s'), SQLITE3_TEXT);
			$stmt-&gt;bindValue(':group',      $f-&gt;group,      SQLITE3_TEXT);
			$stmt-&gt;bindValue(':content',    $f-&gt;content,    SQLITE3_TEXT);
			$stmt-&gt;bindValue(':style',      $f-&gt;style,      SQLITE3_TEXT);

			$result = $stmt-&gt;execute(); // var_dump($result-&gt;fetchArray());
			$db-&gt;close();
			//---------------------------------------------------------------
		}
		catch (Exception $e)
		{
			echo err("is insert adequate?&lt;br/&gt;" . $e-&gt;getMessage());
		}
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="crud-sql" Group="php">
      <ItemsTemplate />
      <ElementTemplate />
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="sql-insert" Group="php">
      <ItemsTemplate>
	[$(DataName)]</ItemsTemplate>
      <ElementTemplate>INSERT INTO [$(TableName)] ($(FieldValuesNK,Cdf))
VALUES($(TableTemplate:sql-identity,$(TableName))
);</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="sql-identity" Group="php">
      <ItemsTemplate>
	:$(CleanName)</ItemsTemplate>
      <ElementTemplate>
	class SQLiteCrudClass
	{
		const sqlInsert = &lt;&lt;&lt;MOD
MOD;
	
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="crud-class" Group="php">
      <ItemsTemplate />
      <ElementTemplate>
	class SQLiteCrudClass
	{
		/**
		 * 
		 */
		const sqlCreate = &lt;&lt;&lt;EOT$(TableTemplate:sql-insert,$(TableName))
EOT;		
	}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js.calibre-models" Group="js.backbone">
      <ItemsTemplate>
		this.set("$(DataName)",node[$(FieldIndex)]);</ItemsTemplate>
      <ElementTemplate>$(TableTemplate:js.backbone-model.initialize,books,data,comments,authors,publishers,tags)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js.backbone-model.initialize" Group="js.backbone">
      <ItemsTemplate>
		this.set("$(DataName)",node[$(FieldIndex)]);</ItemsTemplate>
      <ElementTemplate>
var $(TableAliasCNameC)Model = Backbone.Model.extend({
	defaults: function(){
		return {$(TableTemplate: js.backbone-model, $(TableName))
		};
	},
	fromArray: function(node){$(FieldValues)
		console.log("set publishers model from data");
		return this;
	},
	// the generated part.
	initialize: function(node){
		if (!node) this.fromArray(node);
		return this;
	}
});</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js.backbone-model" Group="js.backbone">
      <ItemsTemplate>
			$(DataName): null</ItemsTemplate>
      <ElementTemplate>$(FieldValues,Cdf)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="Calibre.NET" Group="js.backbone">
      <ItemsTemplate />
      <ElementTemplate>
using System;
using System.Data;
using System.Data.SQLite;

namespace BookApp.Models
{$(TableTemplate: prime.struct.Class#2, books, data, comments, authors, books_authors_link, publishers, books_publishers_link, tags, books_tags_link)
}</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js.backbone-bootstrap-menu" Group="js.backbone">
      <ItemsTemplate>
            &lt;li&gt;&lt;a href="#/$(DataName)"&gt;$(DataName)&lt;/a&gt;&lt;/li&gt;</ItemsTemplate>
      <ElementTemplate>
          &lt;ul class="dropdown-menu" role="menu"&gt;$(FieldValues)
          &lt;/ul&gt;</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js.backbone-model-ini" Group="js.backbone">
      <ItemsTemplate>
		this.set("$(DataName)",node[$(FieldIndex)]);</ItemsTemplate>
      <ElementTemplate>
$(TableAliasCNameC)Model = Backbone.Model.extend({
	defaults: function(){
		return {$(TableTemplate: js.backbone-model, $(TableName))
		};
	},
	fromArray: function(node){$(FieldValues)
		console.log("set publishers model from data");
		return this;
	},
	// the generated part.
	initialize: function(node){
		if (!node) this.fromArray(node);
		return this;
	}
})</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
    <TableTemplate Name="new test item" Alias="js-backbone-iterator" Group="js.backbone">
      <ItemsTemplate>$(TableName)</ItemsTemplate>
      <ElementTemplate>$(TableName)</ElementTemplate>
      <FieldTemplate Name="new test item">
        <ElementTemplate />
      </FieldTemplate>
    </TableTemplate>
  </Templates>
</TemplateCollection>