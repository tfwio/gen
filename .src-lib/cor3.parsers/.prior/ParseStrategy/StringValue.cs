/*
 * Created by SharpDevelop.
 * User: oio
 * Date: 12/1/2013
 * Time: 7:26 AM
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Data;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Cor3.Parsers.Internal;

namespace System.Cor3.Parsers
{

	// Generated by a tool : 12/03/2013 11:20:24.544 AM
	// ------------------------
	public partial class StringValue : KeyValue
	{
		public void ToRow(DataRowView row)
		{
			row["id"] = this.id;
			row["Key"] = this.Key;
			row["Value"] = this.Value;
			row["Group"] = this.Group;
		}
		
		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_StringValue = @"INSERT INTO [StringValue] (
	[key],
	[value])
VALUES(
	@key,
	@value);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_StringValue = @"UPDATE [StringValue] SET
		[key] = @key,
		[value] = @value
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_StringValue = @"Select * From StringValue;";
		#endregion
		#region Properties
		
		[XmlIgnore]
		public int? id { get;set; }
		
		[XmlAttribute("key")]
		virtual public string Key { get;set; }
		/// <summary>
		/// When overriding the value, we would re-name the xml-attribute to a desired name.
		/// </summary>
		[XmlAttribute("value")]
		virtual public string Value { get;set; }
		/// <summary>
		/// When overriding the value, we would re-name the xml-attribute to a desired name.
		/// </summary>
		[XmlAttribute("group")]
		virtual public string Group { get;set; }
		
		#endregion
		#region Constructors
		
		public StringValue(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as int?;
			if (row["Key"]!=DBNull.Value) this.Key = row["Key"] as string;
			if (row["Value"]!=DBNull.Value) this.Value = row["Value"] as string;
			if (row["Group"]!=DBNull.Value) this.Group = row["Group"] as string;
		}

		public StringValue(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public StringValue(StringValue value)
		{
			this.id = value.id;
			this.Key = value.Key;
			this.Value = value.Value;
			this.Group = value.Group;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public StringValue(StringValue value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(StringValue value)
		{
//			this.id = value.id;
			this.Key = value.Key;
			this.Value = value.Value;
			this.Group = value.Group;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
//		public SqlCommand Parameterize(SqlCommand cmd, bool usePrimary)
//		{
//			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
//			cmd.Parameters.AddWithValue("@key", this.key);
//			cmd.Parameters.AddWithValue("@value", this.value);
//			return cmd;
//		}
		#endregion
//	}
	/// <summary>
	/// where key = our id and value is a regular-expression fragment.
	/// </summary>
//	public partial class StringValue : KeyValue
//	{
		static public bool IsNamed { get; set; }
		
		public override string ToString()
		{
			return string.Format( StringValue.IsNamed ? "(<{0}>({1}))" : "{1}",this.Key,this.Value);
		}

	}
	
}
